<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Malware Analysis - malwr0nwind0z</title>
	<atom:link href="/blog/category/malware-analysis/feed/" rel="self" type="application/rss+xml" />
	<link>/blog/</link>
	<description></description>
	<lastBuildDate>Fri, 26 Jan 2024 00:32:47 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/blog/wp-content/uploads/2023/03/cropped-android-chrome-512x512-1-32x32.png</url>
	<title>Malware Analysis - malwr0nwind0z</title>
	<link>/blog/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Lockbit Ransomware 3.0 leverages malicious Word Documents</title>
		<link>/blog/post_1-23-24_lockbit_ransomware_3-0/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_1-23-24_lockbit_ransomware_3-0</link>
					<comments>/blog/post_1-23-24_lockbit_ransomware_3-0/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Wed, 24 Jan 2024 03:05:08 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[3.0]]></category>
		<category><![CDATA[black]]></category>
		<category><![CDATA[doc]]></category>
		<category><![CDATA[loader]]></category>
		<category><![CDATA[lockbit]]></category>
		<category><![CDATA[macros]]></category>
		<category><![CDATA[malspam]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[malwr0nwind0z]]></category>
		<category><![CDATA[paste.ee]]></category>
		<category><![CDATA[PowerShell]]></category>
		<category><![CDATA[raas]]></category>
		<category><![CDATA[ransomware]]></category>
		<category><![CDATA[word]]></category>
		<guid isPermaLink="false">/blog/?p=1414</guid>

					<description><![CDATA[<p>Lockbit Ransomware Lockbit is a well-known ransomware-as-a-service (RAAS) that first emerged in 2019. The Lockbit group threat actors or RAAS affiliates first target a system, once this system is compromised. Its file system is encrypted and a ransom note is dropped on the victim’s computer. This note contains instructions on how to make the ransom [&#8230;]</p>
<p>The post <a href="/blog/post_1-23-24_lockbit_ransomware_3-0/">Lockbit Ransomware 3.0 leverages malicious Word Documents</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="ast-oembed-container " style="height: 100%;"><iframe title="Lockbit Ransomware 3.0 leverages malicious Word Documents" width="1240" height="698" src="https://www.youtube.com/embed/X3ngD7lI35Q?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div><figcaption class="wp-element-caption"><strong>Video 1: Watch the companion video that this blog post inspired.</strong></figcaption></figure>


<p><strong>Lockbit Ransomware</strong></p>
<p>Lockbit is a well-known ransomware-as-a-service (RAAS) that first emerged in 2019. The Lockbit group threat actors or RAAS affiliates first target a system, once this system is compromised. Its file system is encrypted and a ransom note is dropped on the victim’s computer. This note contains instructions on how to make the ransom payment.</p>
<p>Lockbit operators are known to engage in a double-extortion tactic. This involves not only encrypting the files but also exfiltrating sensitive data before encryption. The Lockbit operators then threaten to leak the victim’s data unless the ransom is paid.</p>
<p><strong>How this Lockbit Ransomware works</strong></p>
<p>Lockbit ransomware is typically delivered (attack vectors) to the victim through various methods: phishing emails, malicious spam (malspam), software vulnerabilities, RDP exploitation, and post exploitation kits.</p>
<p>During this particular ransomware campaign, the ransomware was distributed to unsuspecting victims. They were tricked into opening a malicious Microsoft Word document named werili.docx. This malicious Word document contained the following social engineering images: “Select Enable Editing” and “Select Enable Content” (Figure 1), that enticed the unaware victim into enabling editing which then executed the embedded VBA macros, resulting in the encryption of the victim’s computer.</p>
<p><img fetchpriority="high" decoding="async" width="1346" height="707" class="wp-image-1416" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica.png 1346w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-300x158.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-1024x538.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-768x403.png 768w" sizes="(max-width: 1346px) 100vw, 1346px" /><em>Figure 1: </em>Word document contained social engineering images: “Enable Editing” and “Select Enable Content”, that goaded the unaware victims into enabling editing which then executed the embedded VBA macros.</p>
<p><strong>Analysis of the Stage 1 loader – werili.docx</strong></p>
<p>All office document files (i.e. docx, xlsx and pptx) are archive files. Meaning that you can change the extension to .zip and unzip it or it can be directly opened via tools like Winzip or 7zip to extract the contents of these files.</p>
<p>Threat actors often abuse the pre-built file templates called ./word_rels/settings.xml.rels or ./word/_rels/settings.xml.rels (Figure 2). These templates are created within the office document files and normally contain the remote or local path to another template with the extension .dotm that will be automatically loaded upon opening the document.</p>
<p><img decoding="async" width="1366" height="88" class="wp-image-1417" src="/blog/wp-content/uploads/2024/01/word-image-1414-2.png" srcset="/blog/wp-content/uploads/2024/01/word-image-1414-2.png 1366w, /blog/wp-content/uploads/2024/01/word-image-1414-2-300x19.png 300w, /blog/wp-content/uploads/2024/01/word-image-1414-2-1024x66.png 1024w, /blog/wp-content/uploads/2024/01/word-image-1414-2-768x49.png 768w" sizes="(max-width: 1366px) 100vw, 1366px" /><em>Figure 2: settings.xml.rels showed the target url that is hosting the template .dotm file.</em></p>
<p>After further review, I can see that the threat actors decompress the .docx file and change the <em>Target</em> value in the <em>settings.xml.rels</em> file to load their desired template and again compressed it to a .docx file.</p>
<p>Please, note that Target does not need to be local, it can be remote as well, in this case we can see a URL in Target value i.e. “Target=&amp;#x68ttps[:]//learndash[.]825testsites[.]com/b/fgi5k8.dotm”<em>(</em>&amp;#x68 converts to h<em>).</em></p>
<p>We have two office document files: “werili.docx” and “fgi5k8.dotm” (template file). As the victim opens werili.docx it will download the template file (fgi5k8.dotm) along with its macros and as a result the macros will be automatically executed (Figure 3).</p>
<p><img decoding="async" width="802" height="614" class="wp-image-1418" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-1.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-1.png 802w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-1-300x230.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-1-768x588.png 768w" sizes="(max-width: 802px) 100vw, 802px" /><br /><em>Figure 3: </em>werili.docx<em> downloading the template dotm file (</em>fgi5k8.dotm<em>) along with its macros and as a result the macros will get executed.</em></p>
<p><strong>Analysis of the Stage 2 loader – fgi5k8.dotm</strong></p>
<p>I utilized Microsoft Word’s Developer Tools to analyze the embedded VB macros from the downloaded fgi5k8.dotm file. A quick review of the VB macro after loading it I could see that it was obfuscated. So, to save time I decided to dynamically open and run the malicious Word document in debugger mode (Figure 4 &amp; 5), then let CMD Watcher v0.3 capture (Figure 6) the malicious PowerShell script. Just from my past experience, I knew that the VB macros would ultimately invoke a PowerShell.</p>
<p><img loading="lazy" decoding="async" width="1366" height="768" class="wp-image-1419" src="/blog/wp-content/uploads/2024/01/a-computer-screen-with-a-white-screen-description.png" alt="A computer screen with a white screen

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-computer-screen-with-a-white-screen-description.png 1366w, /blog/wp-content/uploads/2024/01/a-computer-screen-with-a-white-screen-description-300x169.png 300w, /blog/wp-content/uploads/2024/01/a-computer-screen-with-a-white-screen-description-1024x576.png 1024w, /blog/wp-content/uploads/2024/01/a-computer-screen-with-a-white-screen-description-768x432.png 768w" sizes="(max-width: 1366px) 100vw, 1366px" /><em>Figure 4: </em>fgi5k8.dotm’s VB<em> macros executed upon opening.</em></p>
<p><img loading="lazy" decoding="async" width="1166" height="729" class="wp-image-1420" src="/blog/wp-content/uploads/2024/01/a-computer-screen-shot-of-a-computer-description.png" alt="A computer screen shot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-computer-screen-shot-of-a-computer-description.png 1166w, /blog/wp-content/uploads/2024/01/a-computer-screen-shot-of-a-computer-description-300x188.png 300w, /blog/wp-content/uploads/2024/01/a-computer-screen-shot-of-a-computer-description-1024x640.png 1024w, /blog/wp-content/uploads/2024/01/a-computer-screen-shot-of-a-computer-description-768x480.png 768w" sizes="(max-width: 1166px) 100vw, 1166px" /><em style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">Figure 5: </em><span style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">fgi5k8.dotm’s VB</span><em style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);"> macros are obfuscated. I used Word’s Developer Tools to deobfuscate them.</em></p>
<p><img loading="lazy" decoding="async" width="755" height="424" class="wp-image-1421" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-program-description-au.png" alt="A screenshot of a computer program

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-program-description-au.png 755w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-program-description-au-300x168.png 300w" sizes="(max-width: 755px) 100vw, 755px" /><br /><em>Figure 6: CMD Watcher v0.3 captured a snapshot of the malicious PowerShell script.</em></p>
<p>After the VBA macros were executed a malicious PowerShell command was run. The PowerShell script utilized curl to download Lockbit payload from:</p>
<p>https[:]//learndash[.]825testsites[.]com/b/abc.exe</p>
<p>The downloaded Lockbit payload’s drop folder location (Figure 7):</p>
<p>C:\Users\Public\cw3fd.exe (Classification: Lockbit payload; abc.exe is renamed once dropped to disk: cw3fd.exe).</p>
<p><img loading="lazy" decoding="async" width="661" height="288" class="wp-image-1422" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-2.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-2.png 661w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-2-300x131.png 300w" sizes="(max-width: 661px) 100vw, 661px" /><br /><em style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">Figure 7: </em><span style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">Downloaded Lockbit payload’s drop folder location</span><em style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">.</em></p>
<p><strong>Analysis of the Stage 3 payload – cw3fd.exe</strong></p>
<p>After the Lockbit payload was dropped on the system, it ran and encrypted the victim’s file system. This variant is Lockbit 3.0, every encrypted file has a .ONa9v7hKI file extension (Figure 8) appended to the filename. Lockbit even changes the victim’s desktop wallpaper letting them know that they have been encrypted (Figure 10).</p>
<p><img loading="lazy" decoding="async" width="652" height="405" class="wp-image-1423" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-3.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-3.png 652w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-3-300x186.png 300w" sizes="(max-width: 652px) 100vw, 652px" /><br /><em style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">Figure 8</em><span style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">: Lockbit encrypted the user’s files and appended a .ONa9v7hKI file extension to the filename.</span></p>
<p><img loading="lazy" decoding="async" width="1366" height="703" class="wp-image-1424" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-4.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-4.png 1366w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-4-300x154.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-4-1024x527.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-4-768x395.png 768w" sizes="(max-width: 1366px) 100vw, 1366px" /><em>Figure 9: </em>This ransom note (ONa9v7hKI.READ.txt) was dropped in every directory.</p>
<p><img loading="lazy" decoding="async" width="811" height="314" class="wp-image-1425" src="/blog/wp-content/uploads/2024/01/a-black-screen-with-white-text-description-automa.png" alt="A black screen with white text

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-black-screen-with-white-text-description-automa.png 811w, /blog/wp-content/uploads/2024/01/a-black-screen-with-white-text-description-automa-300x116.png 300w, /blog/wp-content/uploads/2024/01/a-black-screen-with-white-text-description-automa-768x297.png 768w" sizes="(max-width: 811px) 100vw, 811px" /><br /><em style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">Figure 10: </em><span style="font-size: 1rem; color: var(--ast-global-color-3); background-color: var(--ast-global-color-5);">Lockbit’s desktop wallpaper message to the victim.</span></p>
<p>A standard practice by many ransomware variant is to delete shadow copies. Lockbit does this as well, in order to prevent the recovery of encrypted files from shadow copies, Lockbit 3.0 terminates and deletes the VSS service (Figure 11).</p>
<p>Also, it disabled both Windows Service Center Service (Figure 12) and Windows Defender ATP Service (Figure 13), as well.</p>
<p><img loading="lazy" decoding="async" width="369" height="135" class="wp-image-1426" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-error-description-auto.png" alt="A screenshot of a computer error

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-error-description-auto.png 369w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-error-description-auto-300x110.png 300w" sizes="(max-width: 369px) 100vw, 369px" /><br /><em>Figure 11: Process Hacker captured </em>Lockbit deletion of the VSS (Volume Shadow Copy) Service.</p>
<p><img loading="lazy" decoding="async" width="371" height="157" class="wp-image-1427" src="/blog/wp-content/uploads/2024/01/a-screen-shot-of-a-computer-description-automatic.png" alt="A screen shot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screen-shot-of-a-computer-description-automatic.png 371w, /blog/wp-content/uploads/2024/01/a-screen-shot-of-a-computer-description-automatic-300x127.png 300w" sizes="(max-width: 371px) 100vw, 371px" /><br /><em>Figure 12: Process Hacker captured </em>Lockbit deletion of the Windows Security Center Service.</p>
<p><img loading="lazy" decoding="async" width="369" height="154" class="wp-image-1428" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-error-description-auto-1.png" alt="A screenshot of a computer error

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-error-description-auto-1.png 369w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-error-description-auto-1-300x125.png 300w" sizes="(max-width: 369px) 100vw, 369px" /><br /><em>Figure 13: Process Hacker captured </em>Lockbit deletion of the Windows Defender ATP Service.</p>
<p>Next, I started reviewing the code of cw3fd.exe, after looking at the strings using Bintext (Figure 14), this file was heavily obfuscated within each of the functions. This was definitely a packed file.</p>
<p><img loading="lazy" decoding="async" width="1362" height="730" class="wp-image-1429" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-5.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-5.png 1362w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-5-300x161.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-5-1024x549.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-5-768x412.png 768w" sizes="(max-width: 1362px) 100vw, 1362px" /><em>Figure 14: </em>Review of strings using Bintext revealed this file was heavily obfuscated.</p>
<p>The next step was to look for the file’s unpacking routine using IDA Pro, which brought attention to the use of VirtualAlloc which is used by malware to allocate memory when it is ready to unpack itself into memory. The appropriate breakpoints were set and the file was able to be dumped. Review of contents in the Dump Window, showed the binary was an executable (File header: MZ) (Figure 15).</p>
<p><img loading="lazy" decoding="async" width="1364" height="730" class="wp-image-1430" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-6.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-6.png 1364w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-6-300x161.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-6-1024x548.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-6-768x411.png 768w" sizes="(max-width: 1364px) 100vw, 1364px" /><em>Figure 15: </em>Review of contents in the Dump Window, showed the binary was an executable.</p>
<p>The Lockbit binary is now unpacked, it is known for its dynamic API resolution at runtime which makes reverse engineering the sample more difficult and helps conceal functions from debuggers (Figure 16).</p>
<p><img loading="lazy" decoding="async" width="1091" height="450" class="wp-image-1431" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-7.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-7.png 1091w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-7-300x124.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-7-1024x422.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-7-768x317.png 768w" sizes="(max-width: 1091px) 100vw, 1091px" /><em>Figure 16: This function dynamically resolves the APIs at runtime</em>.</p>
<p>As mentioned earlier, Lockbit dropped a ransom note in every directory. The function builds the ransom note is shown below (Figure 17).</p>
<p><img loading="lazy" decoding="async" width="1092" height="445" class="wp-image-1432" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-8.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-8.png 1092w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-8-300x122.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-8-1024x417.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-8-768x313.png 768w" sizes="(max-width: 1092px) 100vw, 1092px" /><em>Figure 17: </em>The function that builds the ransom note.</p>
<p>Lockbit is also known for its string obfuscation. The following function is a Base64 decoding function used to decode strings (Figure 18).</p>
<p><img loading="lazy" decoding="async" width="1049" height="448" class="wp-image-1433" src="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-9.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-9.png 1049w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-9-300x128.png 300w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-9-1024x437.png 1024w, /blog/wp-content/uploads/2024/01/a-screenshot-of-a-computer-description-automatica-9-768x328.png 768w" sizes="(max-width: 1049px) 100vw, 1049px" /><em>Figure 18: </em>Base64 decoding function.</p>
<p>Lockbit is a ransomware that can compromise the security of a target system and then it encrypts the file system. To protect against Lockbit ransomware attacks, it is important to be aware of the signs of infection and implement best practices for cybersecurity. Organizations should implement a backup strategy that keeps backups offline, not connected to your network and if possible offsite in a different location. By staying informed and vigilant, organizations and individuals can reduce their risk of falling victim to Lockbit.</p>
<p><strong>IOCs:</strong></p>
<p>werili.docx (MD5: 244e475d884c455bb1fbad1a4294f21c); Classification: Lockbit Loader</p>
<p>fgi5k8.dotm (MD5: f2a9bc0e23f6ad044cb7c835826fa8fe) Classification: Lockbit Loader</p>
<p>cw3fd.exe (MD5: 7a83a738db05418c0ae6795b317a45f9) Classification: Lockbit payload</p>
<p>.ONa9v7hKI (Encrypted extension name)</p>
<p>ONa9v7hKI.README.txt (Ransom note file name)</p>
<p><strong>Network IOCs:</strong></p>
<p>https[:]//learndash[.]825testsites[.]com</p>
<p>http[:]//lockbitapt[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx].onion (ONION domain ([46 random characters]))</p>
<p>http[:]//lockbitapt[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx].onion.ly (ONION domain ([46 random characters]))</p><p>The post <a href="/blog/post_1-23-24_lockbit_ransomware_3-0/">Lockbit Ransomware 3.0 leverages malicious Word Documents</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_1-23-24_lockbit_ransomware_3-0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Stealthy Formbook leverages steganography</title>
		<link>/blog/post_5-15-23_formbook_sample/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_5-15-23_formbook_sample</link>
					<comments>/blog/post_5-15-23_formbook_sample/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Mon, 15 May 2023 13:07:17 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[.rar]]></category>
		<category><![CDATA[bitmap]]></category>
		<category><![CDATA[C2 Config]]></category>
		<category><![CDATA[C2 Configuration]]></category>
		<category><![CDATA[formbook]]></category>
		<category><![CDATA[malspam]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[malwr0nwind0z]]></category>
		<category><![CDATA[MASM]]></category>
		<category><![CDATA[rar attachment]]></category>
		<category><![CDATA[steganography]]></category>
		<category><![CDATA[xloader]]></category>
		<guid isPermaLink="false">/blog/?p=1135</guid>

					<description><![CDATA[<p>Formbook: A Infostealer Formbook is a type of malware that is primarily used for stealing sensitive information from infected computers, was first discovered in the wild back in 2016. It is commonly distributed via malspam, or malicious spam, which is a type of spam email that contains malware or links to malware-infected websites. In this [&#8230;]</p>
<p>The post <a href="/blog/post_5-15-23_formbook_sample/">Stealthy Formbook leverages steganography</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="ast-oembed-container " style="height: 100%;"><iframe title="Stealthy Formbook malware leverages steganography" width="1240" height="698" src="https://www.youtube.com/embed/C2bHWnJog7c?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div><figcaption class="wp-element-caption"><strong>Video 1: Watch the companion video that this blog post inspired.</strong></figcaption></figure>



<p></p>


<p><strong>Formbook: A Infostealer</strong></p>
<p>Formbook is a type of malware that is primarily used for stealing sensitive information from infected computers, was first discovered in the wild back in 2016. It is commonly distributed via malspam, or malicious spam, which is a type of spam email that contains malware or links to malware-infected websites. In this report, we will discuss a recent Formbook (version 4.1) infection that occurred via malspam.</p>
<p><strong>How This Formbook Infection Works</strong></p>
<p>In this instance it was delivered through malspam that contained a malicious Microsoft executable within a rar archive named <a id="post-1135-_Hlk134308079"></a>scan copy-001.rar. The malicious Formbook dropper executable (scan copy-001.exe). The email is attempting to social engineer the victim into opening the rar attachment to execute the Formbook malware. The email contained urgent language, asking the victim to confirm that the attachment is a revised proforma invoice (which is an obvious ruse).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-picture-containing-text-screenshot-description.png" alt="A picture containing text, screenshot Description automatically generated" /><br />Figure 1: Formbook malspam containing a malicious rar attachment (scan copy-001.exe)</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/formbook_infection_chain.jpg" alt="This image has an empty alt attribute; its file name is formbook_infection_chain.jpg" /><br />Diagram 1: This Formbooks campaign&#8217;s infection chain.</p>
<p><img loading="lazy" decoding="async" class="" src="/blog/wp-content/uploads/2023/05/FormBook-pricing-e1626822824816.jpg" width="1062" height="531" />Diagram 2: Formbook is a MAAS (Malware as a service). It is sold on underground forums.</p>

<p><strong>Technical Analysis</strong></p>
<p>We start our analysis with scan copy-001.exe (Formbook dropper). It is a 32-bit, .NET executable file. Upon execution of scan copy-001.exe, persistence is set by creating a scheduled task to run every time the infected user logs on:</p>
<p>Scheduled Task: %WINDIR%system32tasksupdatespwwigddan</p>
<p>C:Users&lt;Username&gt;AppDataRoamingpWWigddan.exe (Classification: Formbook Dropper; renamed duplicate of scan copy-001.exe)</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-description-automatica.jpeg" alt="A screenshot of a computer Description automatically generated with medium confidence" />Figure 2: Creates a Scheduled Task to set persistence.</p>
<p><img loading="lazy" decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-description-automatica-1.jpeg" alt="A screenshot of a computer Description automatically generated with medium confidence" width="705" height="225" /><br />Figure 3: Drops a executable file that corresponds with the scheduled task.</p>
<p>The Anti-Analysis functionality includes multiple subfunctions to check for the following anti-analysis tools such as (Fig. 4 &amp; 5):</p>
<ul>
<li>DebuggerHidden: explicitly tells the debugger not to step inside of the method and no break point will be hit over that method.</li>
<li>EditorBrowsable: prevents the debugger from displaying code.</li>
<li>DebuggerBrowsableState.Never: hides the element from the debugger.</li>
</ul>
<p><img loading="lazy" decoding="async" src="/blog/wp-content/uploads/2023/05/EditorBrowsable_DeuggerHidden.png" alt="" width="1158" height="187" /> Figure 4: EditorBrowserable and DebuggerHidden functions.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />Figure 5: DebuggerBrowserableState.Never function.</p>
<p>The Main function decodes the hardcoded base64 encoded module named Bunifu.UI.dll and loads it in the memory using the Invoke method (Figure 6).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-1.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />Figure 6: Scan copy-001.exe loading Bunifu.UI.dll</p>
<p>The new module Bunifu.UI.dll is an obfuscated .NET file that further executes a function to retrieve the embedded bitmap image named otQGDK, which is present in the resource of the malware file scan copy-001.exe.</p>
<p>This steganography technique is used to hide malicious content in the compressed bitmap image. The successful decompression of the bitmap image retrieves another .NET file in memory which is MajorRevision.exe (Figure 8). The Bunifu.UI.dll module then loads MajorRevision.exe using the Assembly.Load method; which passes the decompressed bitmap content as an argument and then invokes it.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screen-shot-of-a-computer-description-automatic.png" alt="A screen shot of a computer Description automatically generated with medium confidence" /><br />Figure 7: Encrypted bitmap image (otQGDK) hiding an embedded executable (MajorRevsion.exe).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-2.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />Figure 8: Successful decompression of the bitmap image retrieves another .NET file in memory which is MajorRevision.exe.</p>
<p>C2 Configuration Settings</p>
<p>Below are the decrypted hardcoded configuration settings:</p>
<p>{&#8220;C2 list&#8221;: [&#8220;www.despachocontablequinsa.com/m82/&#8221;], &#8220;decoy&#8221;: [&#8220;jamesdevereux.com&#8221;, &#8220;artificialturfminneapolis.com&#8221;, &#8220;hongmeiyan.com&#8221;, &#8220;lojaderoupasbr.com&#8221;, &#8220;yit.africa&#8221;, &#8220;austinrelocationexpert.com&#8221;, &#8220;saiva.page&#8221;, &#8220;exitsategy.com&#8221;, &#8220;chochonux.com&#8221;, &#8220;klosterbraeu-unterliezheim.com&#8221;, &#8220;byseymanur.com&#8221;, &#8220;sblwarwickshire.co.uk&#8221;, &#8220;brazimaid.com&#8221;, &#8220;ciogame.com&#8221;, &#8220;bronzesailing.com&#8221;, &#8220;dwkapl.xyz&#8221;, &#8220;022dyd.com&#8221;, &#8220;compassandpathwriting.com&#8221;, &#8220;alphabet1x.com&#8221;, &#8220;selfcleaninghairbrush.co.uk&#8221;, &#8220;power-bank.co.uk&#8221;, &#8220;kickskaart.com&#8221;, &#8220;baumanbilliardsnv.com&#8221;, &#8220;bestcp.net&#8221;, &#8220;doghospitalnearme.com&#8221;, &#8220;mixano.africa&#8221;, &#8220;helarybaber.online&#8221;, &#8220;illubio.com&#8221;, &#8220;ciutas.com&#8221;, &#8220;ldpr33.ru&#8221;, &#8220;killtheblacks.com&#8221;, &#8220;cassino-portugal.com&#8221;, &#8220;danhaii.com&#8221;, &#8220;gvtowingservice.com&#8221;, &#8220;let-travel.africa&#8221;, &#8220;dental-implants-67128.com&#8221;, &#8220;facetaxi.xyz&#8221;, &#8220;ctjh9u8e.vip&#8221;, &#8220;kyosaiohruri.com&#8221;, &#8220;executivepresencetrainer.com&#8221;, &#8220;greatharmony.africa&#8221;, &#8220;feelingsarereal.com&#8221;, &#8220;devopsuday.club&#8221;, &#8220;happiestminds-udemy.com&#8221;, &#8220;fittingstands.com&#8221;, &#8220;happyhousegarment.com&#8221;, &#8220;24daysofheaven.com&#8221;, &#8220;herhustlenation.com&#8221;, &#8220;xn--oy2b27nt6b.net&#8221;, &#8220;hothotcogixem.online&#8221;, &#8220;hausmeisterservice-berlin.net&#8221;, &#8220;hjddbb.com&#8221;, &#8220;stoutfamilychiro.com&#8221;, &#8220;bookishthoughtsbychristy.com&#8221;, &#8220;gibellinaheartquake.com&#8221;, &#8220;8cf1utrb6.xyz&#8221;, &#8220;patrick-daggitt.com&#8221;, &#8220;ebcbank.net&#8221;, &#8220;angel909reviews.com&#8221;, &#8220;arcteryxsouthafricaonline.com&#8221;, &#8220;cutematvhy.com&#8221;, &#8220;art2z.com&#8221;, &#8220;bulkforeverstamps.com&#8221;, &#8220;heatbling.com&#8221;]}</p>
<p>As with previous versions of Formbook, MajorRevision.exe communicates with multiple domains established as decoys, but it only uses one true C&amp;C.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-picture-containing-text-screenshot-font-infor.png" alt="A picture containing text, screenshot, font, information Description automatically generated" /><br />Figure 9: The C2 configuration file.</p>
<p>The final payload is retrieved from memory by converting a large array of bytes, this payload is then injected into a newly created process using Process Hollowing.</p>
<p>The final payload is categorized as Formbook, it is not a .NET application but a MASM-compiled PE32 executable that contains a single .text section.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-3.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />Figure 10: Functions (CreateProcess, NtUnmapViewOfSection, VirtualAllocEx, WriteProcessMemory, SetThreadContext, ResumeThread) referenced in Class15 are utilized for process hollowing.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-program-description-au-4.png" alt="A screenshot of a computer program Description automatically generated with medium confidence" /><br />Figure 11: The final payload (Formbook) is compiled in MASM.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/05/a-screenshot-of-a-computer-description-automatica.png" alt="A screenshot of a computer Description automatically generated" />Figure 12: The final payload (Formbook) contains of a single .text section.</p>
<p>To avoid similar attacks in the future, organizations must adopt strong email security practices that include spam filters, enabling email authentication protocols, as well as user security awareness training.</p>
<p>Users need security awareness training to be able to recognize signs of malspam, including suspicious attachments, urgent language, and unexpected emails from unknown senders.</p>
<p>Additionally, organizations should utilize endpoint protection and regularly update their systems to help mitigate the risk of malware infections.</p>
<p>In conclusion, Formbook infections via malspam pose a serious threat to organizations and individuals.</p>
<p>Attackers use social engineering to trick victims into downloading malware, which could possibly result in significant data breaches and financial losses.</p>
<p>Organizations must remain alert and vigilant. Which hopefully will lead to the implementation of more robust security measures to help protect against these types of attacks.</p>
<p><strong>IOCs:</strong></p>
<p>Scan copy-001.exe &#8211; MD5: 97ab2171b12f2e2b41f65c02f23da953</p>
<p>Bunifu.UI.dll &#8211; MD5: 27F5124BF8F451BCA8D8A15C73C4F521</p>
<p>MajorRevision.exe &#8211; MD5: 93b2754b3afa34b828cb071f036a8d31</p>
<p>Formbook_payload.exe (Final payload) &#8211; MD5: E46809BB82201038371C602FA8B68531</p><p>The post <a href="/blog/post_5-15-23_formbook_sample/">Stealthy Formbook leverages steganography</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_5-15-23_formbook_sample/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</title>
		<link>/blog/post_1-23-23_asyncrat_sample_part_2/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_1-23-23_asyncrat_sample_part_2</link>
					<comments>/blog/post_1-23-23_asyncrat_sample_part_2/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Mon, 23 Jan 2023 10:38:53 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[asyncrat]]></category>
		<category><![CDATA[malspam]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[malwr0nwind0z]]></category>
		<category><![CDATA[onenote malware]]></category>
		<category><![CDATA[quasharr.ddns.net]]></category>
		<category><![CDATA[rat]]></category>
		<category><![CDATA[remote access trojan]]></category>
		<category><![CDATA[wormxwar.ddns.net]]></category>
		<guid isPermaLink="false">http://malwr0nwind0z.local/ut-enim-ad-minim-veniam-quis-nostrud-exercitation-ullamco-laboris-nisi/</guid>

					<description><![CDATA[<p>Continuing our previous AsyncRAT discussion, this is Part 2 of this blog post, where I will review stage 2, which will cover the analysis of the ASyncRAT payload (payload.exe) and we will dive into some of its functionalities. Figure 1: File property details of payload.exe shown in CFF Explorer. Unpacking ASyncRAT Since this is a [&#8230;]</p>
<p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_2/">ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Continuing our previous AsyncRAT discussion, this is Part 2 of this blog post, where I will review stage 2, which will cover the analysis of the ASyncRAT payload (payload.exe) and we will dive into some of its functionalities.</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/table-description-automatically-generated-2.png" alt="Table Description automatically generated" /><strong> Figure 1: File property details of payload.exe shown in CFF Explorer.</strong></p>
<p><strong>Unpacking ASyncRAT</strong></p>
<p>Since this is a .NET Assembly executable, I used DnSpy to start debugging it, to try and determine what are some of this file’s functionalities. After analyzing and decrypting the encoded (Base64 + AES Encryption (Key, IV)) 1st function (Fig. 2), this malware utilizes some of the following Anti-analysis Techniques:</p>
<p>Calls <em>CheckRemoteDebuggerPresent</em> which checks if a debugger (in a different process on the same machine) is attached to the current process.</p>
<p>Calls <em>IsDebuggerPresent</em> which checks whether the current process is being debugged by a user-mode debugger.</p>
<p>Calls <em>AmsiScanBuffer </em>to attempt to bypass AMSI (Antimalware Scan Interface).</p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/a-screenshot-of-a-computer-description-automatica-2.png" alt="A screenshot of a computer Description automatically generated with medium confidence" /> <strong>Figure 2: The first function of payload.exe while loaded into DnSpy.<br />
</strong></p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/graphical-user-interface-text-application-email-1.png" alt="Graphical user interface, text, application, email Description automatically generated" /> <strong>Figure 3: De-obfuscating the first function using CyberChef, reveals strings of Anti-analysis API calls.</strong></p>
<p>Looking at all of the obfuscation within each of these functions, I came to the conclusion, that I was looking at a packed file.</p>
<p>My next step was to look for the file’s unpacking routine, which brought me to the object named memoryStream2 which is from the MemoryStream Class where it receives decompressed bytes from object GzipStream. These bytes were copied to _buffer. After my breakpoint is hit at “return memoryStream2.ToArray()”. I was able to dump the contents of _buffer, the dumped binary is an executable (File header: MZ). (Fig. 4 &amp; 5)</p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-5.png" alt="Text Description automatically generated" /><br />
<strong>Figure 4: Breakpoint set on “return memoryStream2.ToArray()”, contents of _buffer is a dumped executable (File header: 0x4D5A).<br />
</strong></p>
<p style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/01/word-image-39-6-1.png" /> <strong>Figure 5: MemoryDump Window 2 shows contents of _buffer which is a dumped executable (File header: MZ).</strong></p>
<p>A quick look at this file in CFF Explorer (Fig. 6). I can confirm after reviewing its strings, that the dumped binary is an unpacked version of ASyncRAT. I re-named this file unpacked_payload.exe (Original Filename: AsyncClientnownow.exe).</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/table-description-automatically-generated-3.png" alt="Table Description automatically generated" /><strong>Figure 6: File property details of unpacked_payload.exe (AsyncClientnownow.exe) shown in CFF Explorer.</strong></p>
<p><strong>Analysis of unpacked ASyncRaT</strong></p>
<p>Next, I load unpacked_payload.exe (AsyncClientnownow.exe) into DnSpy for analysis. The Main() function initializes settings and flow of code execution. The delay function defines the sleep duration (3 seconds) before execution.</p>
<p><strong>Mutex</strong></p>
<p>if (!MutexControl.CreateMutex())</p>
<p>Environment.Exit(0);</p>
<p>It checks to make sure that the current payload is not duplicated by checking if the Mutex value already exist (MTX = &#8220;AsyncMutex_6SI8OkPnk&#8221;). (Fig. 7).</p>
<p><strong>InitializeSettings</strong></p>
<p>if (!Settings.InitializeSettings())</p>
<p>Environment.Exit(0);</p>
<p>The InitializeSettings function enables all hardcoded configurations and settings (Figure 7). It also enables decryption of all configuration settings from the AES256 algorithm. (Fig. 8).</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-6.png" alt="Text Description automatically generated" /><strong>Figure 7: Main() function.</strong></p>
<pre></pre>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-7.png" alt="Text Description automatically generated" /><strong>Figure 8: InitializeSettings function, where you can see the decryption of all configuration settings from the AES256 algorithm.</strong></p>
<p><strong>Configuration Settings</strong></p>
<p>Below are the decrypted hardcoded configuration settings:</p>
<p><em>Key: JXkxqn0C8WXhwunn5UZ2PfINpI6joafo </em></p>
<p><em>Ports: 6606, 7707, 8808 </em></p>
<p><em>Hosts: 154.12.234.207 </em></p>
<p><em>Version: 0.5.7B </em></p>
<p><em>Install: False </em></p>
<p><em>MTX (Mutex): AsyncMutex_6SI8OkPnk </em></p>
<p><em>Pastebin: null </em></p>
<p><em>Anti: False </em></p>
<p><em>BDOS: False</em></p>
<p style="text-align: center;"><img loading="lazy" decoding="async" class="size-full wp-image-1091 alignleft" src="/blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207.png" alt="" width="1873" height="107" srcset="/blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207.png 1873w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-300x17.png 300w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-1024x58.png 1024w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-768x44.png 768w, /blog/wp-content/uploads/2023/01/payload_traffic_154.12.234.207-1536x88.png 1536w" sizes="(max-width: 1873px) 100vw, 1873px" /><strong>Figure 9: Connection to C2 server (154.12.234.207) to check-in.</strong></p>
<p><strong>Anti Analysis</strong></p>
<p>The Anti Analysis function includes multiple subfunctions to check for the following anti-analysis tools such as (Fig. 10):</p>
<ul>
<li>Detect Manufacturer: enables anti-VM (virtual machine) techniques by using WMI to check for VM environments by querying for the following keywords: “Microsoft Corporation”, “VIRTUAL”, “VMware”, or “VirtualBox”.</li>
<li>Detect Sandbox: checks for the presence of “SbieDll.dll”, to detect if it is running in a sandbox (Sandboxie).</li>
<li>IsSmallDisk: checks for small disk less (than or equal to 61000000000L (56.8 GB)) that may be often used by virtual machines designed for malware analysis.</li>
<li>IsXP: checks whether the operating system is Windows XP.</li>
<li>Anti-Virus Check: checks for which antivirus product is installed in the system by using WMI query command: “<a href="file:///\rootSecurityCenter2">\rootSecurityCenter2</a>”. This pulls this information from Windows security Center.</li>
<li>Detect Debugger: calls <em>CheckRemoteDebuggerPresent</em> which checks if a debugger (in a different process on the same machine) is attached to the current process.</li>
</ul>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/a-screenshot-of-a-computer-description-automatica-3.png" alt="A screenshot of a computer Description automatically generated with medium confidence" /><strong>Figure 10: Anti_Analysis function.</strong></p>
<p><strong>Install and Persistence</strong></p>
<p>ASyncRAT’s Install function maintains persistence checks as to whether the user has admin privileges. This occurs by creating a scheduled task to check every time a user logs on (Fig. 11):</p>
<p><strong>“/</strong>c schtasks /create /f /sc onlogon /rl highest /tn”</p>
<p>If the process reveals there are no admin privileges, a run registry entry is created in HKEY_CURRENT_USER: “Software\Microsoft\Windows\CurrentVersion\Run”; it then copies itself into a “%temp%” folder with a different name and executes from the temp folder via a batch script (Fig. 12 &amp;13).</p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-8.png" alt="Text Description automatically generated" /><strong>Figure 11: Install function.</strong></p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/text-description-automatically-generated-9.png" alt="Text Description automatically generated" /><strong>Figure 12: Batch script used for Persistence.</strong></p>
<p style="text-align: center;"><img decoding="async" class="aligncenter" src="/blog/wp-content/uploads/2023/01/graphical-user-interface-table-description-autom-1.png" alt="Graphical user interface, table Description automatically generated" /><strong> Figure 13: Registry key used for Persistence.</strong></p>
<p>From there, the attacker can execute various commands on the infected system, including:</p>
<p>• Downloading additional malware (i.e. Remos)</p>
<p>• Executing programs and commands</p>
<p>• Taking screenshots</p>
<p>• Logging keystrokes</p>
<p>• Turning on the microphone and/or webcam to spy on the victim</p>
<p><strong>Detection and Prevention</strong></p>
<p>To detect and prevent ASyncRat attacks, it is important to be aware of the following:</p>
<p>• Suspicious email attachments</p>
<p>• Suspicious network activity</p>
<p>• Slow system performance</p>
<p>• Unusual pop-up windows and error messages</p>
<p>It is also recommended to implement the following best practices:</p>
<p>• Keep software and security systems up to date</p>
<p>• Educate employees on the dangers of phishing emails and malspam</p>
<p>• Use Anti-Virus with real-time protection</p>
<p>• Enable firewalls and limit incoming connections</p>
<p>• Regularly backup important data and store those backups offline</p>
<p><strong>Conclusion</strong></p>
<p>ASyncRat is a malicious RAT that can compromise the security of a target system and allow remote attackers to gain unauthorized access and control. To protect against ASyncRat attacks, it is important to be aware of the signs of infection and implement best practices for cybersecurity. By staying informed and vigilant, organizations and individuals can reduce their risk of falling victim to ASyncRat.</p>
<p><strong>IOCs:</strong></p>
<p>payload.exe (Original Filename: tmp4D28.tmp) (MD5: FCF99858964E59B68B0433B135B499BB)</p>
<p>unpacked_payload.exe (AsyncClientnownow.exe) (MD5: e9d6d1ed7007d55c6a9ec576ff1f0172)</p>
<p><strong>C2 IOCs:</strong></p>
<p>154.12.234[.]207 (wormxwar.ddns[.]net, quasharr.ddns[.]net)</p><p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_2/">ASyncRAT delivered through malspam via OneNote attachment (Stage 2)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_1-23-23_asyncrat_sample_part_2/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</title>
		<link>/blog/post_1-23-23_asyncrat_sample_part_1/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_1-23-23_asyncrat_sample_part_1</link>
					<comments>/blog/post_1-23-23_asyncrat_sample_part_1/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Mon, 23 Jan 2023 04:12:59 +0000</pubDate>
				<category><![CDATA[Malware Analysis]]></category>
		<category><![CDATA[asyncrat]]></category>
		<category><![CDATA[malspam]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[malwr0nwind0z]]></category>
		<category><![CDATA[onenote malware]]></category>
		<category><![CDATA[quasharr.ddns.net]]></category>
		<category><![CDATA[rat]]></category>
		<category><![CDATA[remote access trojan]]></category>
		<category><![CDATA[wormxwar.ddns.net]]></category>
		<guid isPermaLink="false">http://malwr0nwind0z.local/?p=972</guid>

					<description><![CDATA[<p>AsyncRat: A Remote Access Trojan (RAT) AsyncRat is an open source Remote Access Trojan (RAT) that was originally released on Github. It has since been weaponized by threat actors and actively used in cyber attacks since 2019. This malware is designed to compromise the security of a target system and allow remote attackers to gain [&#8230;]</p>
<p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_1/">ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="ast-oembed-container " style="height: 100%;"><iframe title="ASyncRAT delivered through OneNote attachments" width="1240" height="698" src="https://www.youtube.com/embed/-lCBhme0zXM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div><figcaption class="wp-element-caption"><strong>Video 1: Watch the companion video that this blog post inspired.</strong></figcaption></figure>



<p></p>



<p></p>


<p><strong>AsyncRat: A Remote Access Trojan (RAT)</strong></p>
<p>AsyncRat is an open source Remote Access Trojan (RAT) that was originally released on Github. It has since been weaponized by threat actors and actively used in cyber attacks since 2019. This malware is designed to compromise the security of a target system and allow remote attackers to gain unauthorized access and control. In this blog post, we will analyze the behavior and characteristics of AsyncRat to better understand how it operates and how to protect against it.</p>


<p>                                                                                 </p>


<p><img decoding="async" src="/blog/wp-content/uploads/2023/12/image-1.png" alt="This image has an empty alt attribute; its file name is Asyncrat_builder.png" /><br /><strong>Figure 1: AsyncRAT&#8217;s attacker control panel</p>
<p></strong></p>
<p><strong>How This AsyncRat Infection Works</strong></p>
<p>The AsyncRat is typically delivered to the victim through various methods, including phishing emails, social engineering tactics, and exploiting vulnerabilities in unpatched software. In some cases, the malware may also be delivered through drive-by downloads, where the victim unwittingly downloads the malware while visiting a compromised website. The exact method of delivery may vary depending on the attackers&#8217; goals and the target&#8217;s specific vulnerabilities.</p>
<p>In this instance it was delivered through malspam that contain a malicious Microsoft OneNote document within a zip archive named Invoice #099272663.zip. The malicious OneNote document (Invoice #099272663.one) contained a social engineering “CLICK TO VIEW DOCUMENT” image, that once clicked, it executes embedded VBScript.</p>
<h6 style="text-align: center;"><img loading="lazy" decoding="async" class="size-large wp-image-1001 aligncenter" src="/blog/wp-content/uploads/2023/01/onenote_screenshot-1024x658.png" alt="" width="1024" height="658" srcset="/blog/wp-content/uploads/2023/01/onenote_screenshot-1024x658.png 1024w, /blog/wp-content/uploads/2023/01/onenote_screenshot-300x193.png 300w, /blog/wp-content/uploads/2023/01/onenote_screenshot-768x494.png 768w, /blog/wp-content/uploads/2023/01/onenote_screenshot.png 1398w" sizes="(max-width: 1024px) 100vw, 1024px" />Figure 2: Embedded social engineering “CLICK TO VIEW DOCUMENT” image in the OneNote document (Invoice #099272663.one)</h6>
<p><img loading="lazy" decoding="async" class="alignnone size-full wp-image-1291" src="/blog/wp-content/uploads/2023/01/asyncrat_infection_chain.jpg" alt="" width="572" height="491" srcset="/blog/wp-content/uploads/2023/01/asyncrat_infection_chain.jpg 572w, /blog/wp-content/uploads/2023/01/asyncrat_infection_chain-300x258.jpg 300w" sizes="(max-width: 572px) 100vw, 572px" /><br /><strong>Figure 3: AsyncRat infection chain.</p>
<p></strong></p>
<p>The VBScript invokes PowerShell to download a benign decoy OneNote document and a malicious batch script from the following URLs:</p>
<p>Download URL: hxxps://www.onenotegem[.]com/uploads/soft/one-templates/the_daily_schedule.one</p>
<p><a id="post-972-_Hlk126684701"></a> Drop folder location: C:Users&lt;Username&gt;AppDataLocalTempinvoice.one (Classification: benign decoy OneNote document used to trick the victim into thinking that all is well, after clicking on the aforementioned embedded social engineering “CLICK TO VIEW DOCUMENT” image)</p>
<p>Download URL: hxxps://transfer[.]sh/get/bjLvT5/AsyncClientnownow.bat</p>
<p>Drop folder location: C:Users&lt;Username&gt;AppDataLocalTempsystem32.bat (Classification: ASyncRAT loader &#8211; malicious batch file)</p>
<h6 style="text-align: center;"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-1002" src="/blog/wp-content/uploads/2023/01/onenote_malicious_vbscript.png" alt="" width="1920" height="950" srcset="/blog/wp-content/uploads/2023/01/onenote_malicious_vbscript.png 1920w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-300x148.png 300w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-1024x507.png 1024w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-768x380.png 768w, /blog/wp-content/uploads/2023/01/onenote_malicious_vbscript-1536x760.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" />Figure 4: Embedded VBScript that when executed downloads a decoy OneNote document and a malicious batch script.</h6>
<p>Spoilers!! The batch script (AsyncClientnownow.bat) that is downloaded to the system and executed, will ultimately drop and executed a ASyncRAT executable (payload.exe). The ASyncRAT executable is written in Microsoft .NET Framework. The batch script is classified as a ASyncRAT dropper.</p>
<p>Next, I will briefly discuss how the heavily obfuscated batch script works. The first part of its code is an obfuscated executable file and the second part is an base64 encoded PowerShell script.</p>
<h6 style="text-align: center;"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-977" src="/blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa.png" alt="Graphical user interface, text Description automatically generated" width="1920" height="951" srcset="/blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa.png 1920w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-300x149.png 300w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-1024x507.png 1024w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-768x380.png 768w, /blog/wp-content/uploads/2023/02/graphical-user-interface-text-description-automa-1536x761.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /> Figure 5: Obfuscated batch script that contains an encrypted ASyncRAT binary.</h6>
<p>Once the base64 encoded PowerShell script is run it is de-obfuscated during runtime. A review of this PowerShell shows that it is used to de-obfuscate the first part of code in the batch script utilizing base64 decode, AES Decryption (Key and IV), and Gunzip. The resulting de-obfuscated code turns out to be the aforementioned ASyncRAT executable file, which is then loaded into memory and executed.</p>
<h6 style="text-align: center;"><img loading="lazy" decoding="async" class="alignnone size-large wp-image-978" src="/blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-1024x248.png" alt="Text Description automatically generated" width="1024" height="248" srcset="/blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-1024x248.png 1024w, /blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-300x73.png 300w, /blog/wp-content/uploads/2023/02/text-description-automatically-generated-1-768x186.png 768w, /blog/wp-content/uploads/2023/02/text-description-automatically-generated-1.png 1279w" sizes="(max-width: 1024px) 100vw, 1024px" /> Figure 6: A portion of the de-obfuscated batch script that shows the PowerShell script.</h6>
<p>During my manual analysis, I was able to decrypt the obfuscated executable file using CyberChef. As I mentioned earlier it is classified as ASyncRAT and written in Microsoft .NET Framework. I re-named this file payload.exe.</p>
<h6 style="text-align: center;"><img decoding="async" src="/blog/wp-content/uploads/2023/02/graphical-user-interface-text-application-descr.png" alt="Graphical user interface, text, application Description automatically generated" /> Figure 7: De-obfuscating the first part of the batch script using CyberChef. The file header is MZ, revealing that it is a Windows executable file.</h6>
<p>That ends Part 1 of this blog, which was just analyzing stage 1 of this infection. In Part 2 of this blog post I will review stage 2, which will cover the analysis of the ASyncRAT payload and dive into some of its functionalities.</p>
<p><strong>IOCs:</strong></p>
<p>Invoice #099272663.zip (MD5: 5879DA120E13BC22DE3697D4A3CB2878)</p>
<p>Invoice #099272663.one (MD5: 12B1656C766432FB6FE46AB8C40EE209)</p>
<p>invoice.one (the_daily_schedule.one) (MD5: 8AABD7680DBDC7EB95340D69ADA9D25C)</p>
<p>system32.bat (asyncClientnownow.bat) (MD5: C3AD255AB5B6318DB06602485D8D9CA0)</p>
<p>payload.exe (Original Filename: tmp4D28.tmp) (MD5: FCF99858964E59B68B0433B135B499BB)</p><p>The post <a href="/blog/post_1-23-23_asyncrat_sample_part_1/">ASyncRAT delivered through malspam via OneNote attachment (Stage 1)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_1-23-23_asyncrat_sample_part_1/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
